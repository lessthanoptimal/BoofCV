TOP ITEMS
- TODO New chessboard detector (current is too brittle)
  * binary, contour, line segments
  * look for line segments which have end points that are close to each other

- TODO PNP regression and benchmark
- TODO Compare BoofCV's IPPE against original

- TODO determine why solving for nullspace with QRP causes decoding regression to get worse
- TODO create regression for homography estimation

- TODO QR Code algorithm
  * Better rejection of finder patterns using graph
  * See if a better reading of mode bits is needed
  * Reading mode and version. For small qr codes use the lines connecting position patterns
    those will be more reliable than the sides

- TODO Visualization tools for Direct VO
-      Show warped image
- TODO Tutorial on image features?  Sparse and dense?
- TODO Look at AKAZE feature
- TODO Clarify how you calibrate the camera in Processing
- TODO DescribeDenseHogFastAlg naming consistency. See TODO at top

- Create a fully automated build script for creating source and library zip and uploading them
- integrate into this a script which will check the readme and other files for out of date references to the old version
  check date in readme to see if it's correct


Less High Priority Next Release

- Chessboard Detector
  * Split shapes with contour that barely touch. This is more of a problem in large images.
  * Handle case where squares touch border in large images better. Block region size had to be increased.

- Polyline
  * Fit a large contour where only a small part of it is a square. Use found corners in fiducials
  * need to still be very fast and reject false positives

- Calibration Target Clustering
  * Random shapes can find their way into the grip
  * Needing to be able to process fisheye images makes it hard to disconnect
  * Compensating with thresholding and other methods which will degrade performance in other environments

- Thresholding
  * Handle shadows better in calibration targets
  * Identifisd 3 distributions and picks a threshold between the two smallest

- Stereo Rectification
  * Make it easier.  Single class like in pyboof
- Stereo Disparity
  * make float images contain actual disparity, not offset.  negative values for invalid

- SFM
  * Naive implementation of DLS
    http://www-users.cs.umn.edu/~stergios/papers/ICCV-11-DLS-PnP.pdf
    https://code.google.com/archive/p/dls-pnp-python/downloads
  * RPnP
    A Robust O(n) Solution to the Perspective-n-Point Problem
    https://xuchi.weebly.com/rpnp.html
  * MLPNP - A REAL-TIME MAXIMUM LIKELIHOOD SOLUTION TO THE PERSPECTIVE-N-POINT PROBLEM

- Contour
  * Encode the direction of the next pixel in the contour instead of the pixel directly.
    Reduces memory overhead and is useful for shape analysis

- Fiducials
  * Detection:  Return bounding polygon in pixel coordinates (undistorted and distorted)?
  * Testing: Change generic unit tests to render the marker
             Render a marker with a lot of distortion.
             So much that it should fail if not corrected properly
  * Black Border:   See comment below

- Regression
  * Support binary features in Detect/Describe regression
  * Standardized format which is easy for human and machine to read?
    - This should enable easy automated checks for significant change
  * Automate fault detection from regression tests
  * Split runtime regression off from stability

- Improve pose estimate for calibration fiducials

- Assisted Calibration
  * binary pattern grid
  * Ability to change calibration model and recompute
  * Ability to remove images and recompute

Face Detectors
 - https://github.com/nenadmarkus/pico
 - http://libccv.org/doc/doc-scd/

Future

- Dense Features
  * See if pruning low contrast regions improve scoring
    - Prune X fraction per image or global threshold across all images
    - Print debugging info to help with tuning?
  * See if different image sampling methods can improve scene recognition

- Fiducial Square
  * Regression tests that can determine if orientation is consistent
    - If multiple squares on same surface see if their orientation is the same
  * Image fiducial.  Look at all the images and compute pixel weighting of pattern based on variance.
                     Put all patterns which meet the correctness fraction then use the weighted sum to
                     select the winner.
  * For is black border black test, ignore the outer and inner most pixels to reduce false negative rate
  * Consider alternative algorithm for small (or all) squares.  Contour -> gradient -> cluster/hough
  * When optimizing the edges don't sample points tangent to the line sample points parallel to the adjacent sides
    that way it will sample inside the square more often.  Maybe interpolate between slope of both sides?
  * Look at alternative methods for generatng interpolated inner image.  bilinear is probably exagerating.  surface integral?

- Multi camera calibration using square binary patterns.

- Sparse Bundle Adjustment?

- Look at OpenCV's watershed example.  It's actually a useful technique!

- Background Model
  * Shadow removal
  * remove support for Planar once Interleaved is supported enough

- ImplSsdCorner_S16
  * Handle the border.  Currently is is just skipped
  * If the image is resized that will cause problems since the border can affect the location of local
    maximums
  * Create a generic function for handling borders?  Give it a function and it returns a solution?