Change Log

Date Format: year/month/day

---------------------------------------------
Date    : 2021/
Version : 0.40

Build
- Added sanity check that makes sure autogenerate had been run already first and prints out a helpful message
- Fixed accidental Lombok dependency
- Added Nullable again
Misc
- Config classes now must implement setTo() which returns 'this' to allow chaining and easy copies
ImageProcessing
- Added ImageMiscOps.transpose()
Background Model
- Created threaded implementations of stationary and moving
- Added internal benchmarks for moving
QR Code
- Added ability to decode transposed markers. Can be turned off.

TODO Monocular SLAM
TODO Stereo SLAM
TODO Added calibration targets Hamming Marker grid and chessboard, e.g. ChArUco and ArUco grids.
TODO Applications for self calibration mono and stereo
TODO Monocular VO

---------------------------------------------
Date    : 2021/Oct/13
Version : 0.39.1

Build
- Dropped support for Java 8 (finally)
- Generates Java 11 bytecode
- Gradle createLibraryDirectory no longer includes .class files
- Gradle alljavadoc excludes Android code to avoid silently failing
Applications
- Fixed assisted calibration launcher from CameraCalibrationMono
- Launcher now has a scrollbar and assisted calibration button
- CameraCalibrationMono --GUI now launches the new GUI
- Fixed crash in CreateFiducialSquareHammingGui
Data Structures
- StereoParameters is no longer initialized with null fields

---------------------------------------------
Date    : 2021/Oct/8
Version : 0.39

- Build
  * Summary JavaDoc is now required
  * Runtime regression from JMH files
- Applications
  * Calibration target generator supports more targets
  * Add option to save landmarks locations on PDF document
  * New monocular calibration GUI app
  * New stereo calibration app. Command line and GUI.
  * Assisted calibration can now change target type in the GUI
- Image Processing
  * Added function for PSF for linear motion blur
  * GConvolveImage - can now pass in BorderType
  * ConvolveImage - automatic resizing of output
- Simulation
  * Hunted down causes of small errors in rendering. New approach is used the samples multiple points.
  * Can simulate motion blur
- Calibration
  * Two high level calibration detection APIs. One for single target and one for multiple targets
  * Added support for full Kannala-Brandt fisheye camera model
  * Added new ECoCheck marker for multi camera calibration
  * Removed Square Grid Binary target type as it was never reliable enough to flush out entirely and never used
- Fiducial Markers
  * Added support for ArUco and AprilTags as "HammingMarkers"
  * Can render ChaRuCo and ArUco grids, but can't detect them yet
- Visual Odometry
  * Now supports concurrent model matching
- Demonstrations
  * Improved stereo and mono calibration applications

---------------------------------------------
Date    : 2021/Jul/12
Version : 0.38

- Build
  * Updated to Gradle 6.8.3
  * Now uses Toolchains. This should eliminate problems caused by people using an incompatible JDK.
  * Move template from feature package into recognition package since recognition is what it does
- Examples
  * Added an example for computing a trifocal tensor
  * Added an example showing how the trifocal tensor can be used
- Applications
  * Batch down sample app now lets you scale for a fix number of pixels and keep aspect ratio.
  * CameraCalibration can now just save detections
  * Several apps now let you specify a path using 'glob:' and 'regex:' greatly improving its versatility
  * Added Scene reconstruction application. Command line only for now
- Android
  * Fixed SimpleCamera2Activity not properly settings intrinsics. Thanks infologika-outsrc for the bug report
- Functional API
  * Added forEachXY and forEachPixel to images
  * PixelMath.lambda is now PixelMath.operator
  * ImageBorder no longer uses reflection but uses a functional API instead
- CalibrationIO
  * Can save and load calibration landmarks in CSV format
  * Can save and load Brown camera model in OpenCV format
- UtilIO
  * Added saveConfig() to save any BoofCV Configuration in a yaml format
  * Added listSmart() that can list files inside a directory, blob pattern, or regex pattern
- DownSelectVideoFramesFor3DApp
  * Fixed image scaling issue when image was smaller than desired
- QR Code
  * Fixed reading of second format region. Thanks DCNick3 for finding the issue!
  * Fixed UTF8 issued when guessing the encoding. C2 was incorrectly marked as invalid
    Thanks gerripeach for finding the issue and helping debug it!
- Image Processing
  * Re-ordered loops to speed up vertical convolution for inner image. 1.2x to 3x faster. Except for U8_I16
  * Added Scharr Gradient 3x3
  * Added Template Squared Difference Normed. Thanks rthaenert for the feature request
  * Wolf and Niback Binarization
- Image Features
  * Fast Corners are now concurrent
  * SIFT the entire scale space is computed at once. This might result in a net ~10% increase memory.
  * SIFT fixed bug where it was not respecting maximum feature detections.
  * SIFT concurrent implementation is running. Single thread is about 3% slower.
- Image Recognition
  * Added: Bag-of-Words Nearest Neighbor search with Inverted Files
  * Added: Nister, Stewenius, "Scalable recognition with a vocabulary tree", CVPR 2006
- Scene Reconstruction
  * Added high level implementations which break down sparse and dense reconstruction down to their bare inputs
  * Multiview Stereo has better center view selection which reduces amount of redundant views
  * Added SimilarImages implementations that use Image Recognition, i.e. loop closure
  * Instead of a single seed for the metric reconstruction multiple seeds are spawned, grown, then merged.
  * Improved pairwise scoring. It can differentiate between planar scenes and pure rotations.
- SFM
  * Triangulate 2-views in homogenous coordinates
  * Switched several 2-view triangulation classes over to using homogenous coordinates so that
    points at or near infinity are no longer a failure mode
- MultiViewOps
  * compatibleHomography
  * homographyToFundamental given 2 points
- PerspectiveOps
  * isBehindCamera(homogenous) handles the more nuanced case of determining if a homogenous point is behind
- Misc
  * Added ConfigGenerator for easily creating a set of Configurations when parameter tuning
  * Added PointTracker.getImageType() so you know what type of image it requires

---------------------------------------------
Date    : 2020/Dec/21
Version : 0.37

- Build
  * Switch to Java 14 syntax. Still generating Java 1.8 byte code
  * Removed auto generated F32 files from the build
  * Can now generate code from some Generate*.java files with a gradle command.
    - Generated source is still in repo to make submitting PR's easier but stale files will now be caught quickly
  * Uses Error Prone and Null Away
  * Modified sub-projects to stream line build process and to be more logical
  * Moved `calibration` into `geo`
  * Created `ip-multiview` and moved disparity code and a few classes in `geo` in to it
  * All functions are checked for stdout spam
  * Added lint checks for how "var" is used and for-each style loops in performant code
- Random Dot Markers
  * Created GUI for generating markers. Print or save to disk
  * Fully integrated into Applications
  * Rectangular markers are now fully supported
  * Small runtime speed improvement by recycling memory
- PointTracker
  * Orientation is now configurable using the new interface
  * Added back in or added for the first time association with sets using `AssociateDescriptionSets`
  * Added PointTrack.lastSeenFrameID field
- Color
  * Added support for YUYV color format used in webcams
- Image Processing
  * PixelMath now supports Lambdas
  * Median blur supports kernel radius independently along x and y. Thanks thhart for the request.
- GUI: Swing Point Cloud Viewer
  * Added clip and fog controls
  * Holding control slows down translation and switches mouse to doing roll
  * Might have fixed halting issue
- Features
  * Removed BrightFeature since dark/white has been moved into the detector in all situations
- Feature Sets
  * Created FeatureSets interface that specifies how sets are handled by feature detectors
  * This makes it easier and less complicated to only associate "dark" or "bright" features with each other
  * Added functions to UtilFeatures to simplify adding sets to association algorithms
- Feature Association
  * Greedy 2D now can do all the validation tests that the regular one can do
  * Greedy 2D now has a concurrent version
- Visual Odometry
  * Updated to take advantage of new 'sets' API in PointTracker
  * DDA and Hybrid have been updated to use the new 2D association API
  * Updated code to take advantage of better data structure/functions since they were first created
  * Uses common SBA code now. Supports more configurations than before.
- Examples
  * Updated ExampleImageEnhance to include color images
- Demonstration Applications
  * Examples are no longer added to recent file list
  * openFile() now works again with relative file paths
  * Clear recent item list
  * Discrete image pyramid can now be configured with both min pixels and levels
  * Updated Hybrid Tracker's GUI controls
  * Updated Hough Binary and Hough Gradient to allow clicking in transformed image and more
- FeatureSelectLimit
  * Supports multiple point types
  * Variant with and without intensity information
  * Spatial approaches work when there are no images and intensity is derived from features
- PKltTracker
  * Maximum tracks is now ConfigLength to make it easier to tune once across image sizes
- FAST Corner feature detector
  * Configurable in the GUI
  * More efficient storage of candidate corners
- RegionOrientation
  * Can now specify feature orientation approach using Configuration class
- PointTrackerKltPyramid
  * It now manages the track limit itself instead of letting the detector handle it
- General Feature Detector
  * Exclude list is no longer subtracted from requested detections
  * Single exclude list for max and min
  * When both max and min are detected excluded is correctly handled now
  * Feature limit is split between max and min
- FAST corners
  * Fixed rounding issue in F32 variant
- SURF Feature Detector
  * Moved computation of dark/white feature into detector
  * Added support for limiting the total number of features returned with SelectLimit
- SIFT Feature Detector
  * Added support for limiting the total number of features returned with SelectLimit
- PerspectiveOps
  * Fixed a bug in one of the renderPixel() functions (used fy instead of fx)
- Scene Reconstruction
  * Fixed bug in CompatibleProjectiveHomography when using camera matrices only
  * Projective from arbitrary images using PairwiseImageGraph
  * Projective to Metric for arbitrary number of views
  * PointTrackerToSimilarImages uses a tracker to match features for reconstruction
- Multi-View Stereo
  * Added MultiViewToFusedDisparity to combine multiple disparity images into one
  * Added MultiViewStereoFromKnownSceneStructure which computes a dense cloud from multiple disparity images
  * Added an application which down samples the frames in an image sequence based on quality of 3D geometry
- Sparse Bundle Adjustment
  * Fixed bug in how pixels are scaled in ScaleSceneStructure.
  * A view's pose can now be specified relative to other views. Can be a known or estimated parameter
- MultiViewOps
  * Fixed decomposeMetricCamera() so that it doesn't change the scale of T. This messed up common frames
  * Triangulate N-points using calibrated homogenous coordinates
- Stereo
  * Speckle noise removal algorithm. Supports U8 and F32 image types.
- Calibration
  * Stereo calibration now performs a join bundle adjustment after estimating the stereo baseline
- Concurrency
  * Removed WorkArrays since they were poorly designed

---------------------------------------------
Date    : 2020/May/18
Version : 0.36.1

- Fixed loading Uchiya Marker description from a jar in the Example
- Fixed Uchiya Marker Demonstration when running from a jar
- Fixed Stereo Visual Odometry demonstration when running from a jar
  * This should also fix anything in the future which uses file sets

---------------------------------------------
Date    : 2020/May/17
Version : 0.36

- Build
  * Created integration/boofcv-pdf module to contain code for reading/writing PDF documents
  * If stable release, fail uploadArchives if dirty
- Android
  * Changed a sort function in ChessboardCornerClusterFinder for Android compatibility
- Using Java 11 syntax (e.g. var) but still will produce Java 1.8 byte code
  * https://github.com/bsideup/jabel
- Misc
  * Change the definition of a floating point value to be inside image bounds if it's less than width or height
    before it was < width-1, and < height-1. This conforms to rounding down standard.
  * Created FiducialTracker interface
  * Updated for DDogleg's FastAccess, FastArray, and FastQueue
  * Config's now all implement setTo() and this is enforced with a unit test
  * Planar images now update the number of bands in ImageType when the number of bands is reshaped
- Added Project Lombok for auto generating setters/getters
- Kotlin
  * Initial release with specialized support for Kotlin
  * Extensions provided for converting between image types
  * Operator overloading for PixelMath
- Image Processing
  * Fixed ImageDistort crashing if an invalid region is specified. It simply does nothing now.
  * FDistort now supports SKIP border. Thanks Nico Stuurman for reporting the issue!
  * Created ContourOps
  * Deterministic non-max block concurrent algorithm
  * Discrete image pyramids can now be dynamically defined based on input image size
  * Added a proper config for discrete image pyramid levels
  * Deterministic non-max suppression block candidate concurrent
  * ImageMiscOps.copy() with border for input image
  * ImageMiscOps now has concurrent code
  * ImageMiscOps.findAndProcess()
  * Split mean filter into BlurImageOps.mean() and BlurImageOps.meanB()
  * BlurImageOps.meanB() requires a border to be specified, if null is specified then just the inner portion is processed
  * Created Histogram2D_S32 to easily create and process 2D histograms
  * Created ImageCoverage which is used to compute the fraction of an image covered by features
- DeformPointMLS
  * Massive reduction in memory usage. 20k control points: 800 MB to 3.4 MB
    See BMemoryImageDeformPointsMLS
  * Thanks olegvakulenko for finding the problem and submitting the initial fix!
- Moved KLT from boofcv-geo to boofcv-feature
  * No idea what it was doing in geo originally but it didn't belong there!
- QR Code
  * More informative error message when encoding a QR Code
  * Fixed incorrect conversion from bits to bytes. Can sometimes store more data!
  * Thanks phillip-fry for reporting the problem
- Added Random Dot Marker (Uchiya Marker)
  * First pass implementation. Plenty of room for improving speed
- PointTracker
  * Added frameID for each processed frame
  * Added spawnFrameID to tracks
  * Tracks and similar data structures no longer extend Point2D. Serious unintended consequences from that.
    Point2D overloads equals and hashcode which broke trackers.
- FeatureSelectLimit
  * When the number of detected corners/features exceeds a specified limit these are used to resolve the ambiguity
  * Most of this code existed in some form but was not formalized and centrally implemented
  * Four different variants are provided
- Shape Detectors
  * BinaryEllipseDetectorPixel will use external only contour detector when it doesn't detect internal contours
- PerspectiveOps
  * Added two types of point invariants
- Association
  * Added score ratio test to Greedy
  * Added Configuration for Greedy
- Scene Reconstruction
  * Better cropping on rectified image using bounding box instead of rotation matrix
- Visual Odometry
  * Re-wrote VisualizeStereoVisualOdometryApp. Much better visualization and more configurable
  * All stereo visual odometry algorithms now support multiple key frames and bundle adjustment
  * Note all approaches lost 2D spatial association, ability to feature handle sets, and two pass tracking.
  * While this simplified the code the loss of 2D association did degrade runtime performance significantly for Quad.
  * Those are all scheduled for consideration in the next release with a cleaner interface
- Stereo
  * Added sparse disparity with Census and NCC
  * Added Census support for F32 images
  * Changed how correlation texture check is done. Before two identical peaks didn't get filtered.
  * Added sparse forwards-backwards validation
- Android
  * Changed image workspace from byte[] to GrowQueue_I8 so that it can be dynamically computed.
  * Fixed issues with visualizing disparity
  * SimpleCamera2Activity::cameraIntrinsicNominal() returns false if it fails
  * Added Bitmap processing example
- Applications
  * Fixed calibration detector apps bug where scale got missed up when playing a movie
- OpenKinect: Removed integration package since it hadn't been used in years
- Demonstrations
  * Demonstration recent file list is now in YAML format and supports multiple files
  * Added settings
  * Added the ability to switch between different swing themes; darklaf and material-ui
  * It will default to JCodec if all else fails when trying to load a movie.
- JCodec
  * Finally fully integrated and MP4 videos can be read on all systems!
  * Updated to latest release and fixed bad code in BoofCV.
- Color
  * Can convert YUV, HSV, and YCbCr to 32-bit RGB color
  * Fixed conversion between XYZ/LAB and RGB by applying Gamma correction.
    - Thanks Jairo Rotava for finding/showing/helping to fix the XYZ/LAB bugs!
  * Added XYZ/LAB to RGB conversion.
  * Added ColorDiff - Computes metrics for the difference between colors
    - Thanks Jairo Rotava for the code contribution!

---------------------------------------------
Date    : 2019-Dec-23
Version : 0.35

- ImageType now as predefined types, e.g. SB_U8, IL_F64, PL_S32, ... etc
- Build
  * Fixed some dependencies not being included in the library zip (Thanks changbaishan)
- Mean Shift
  * Even kernel sizes
  * Configuration class
  * Ignore negative values
- Image Processing
  * Added Hessian determinant direct from input image
  * Added sumAbs() to ImageStatistics
  * Added histogramScaled() to ImageStatistics
  * Added Census transform
  * Added stdev to Pixelmath
  * Added fillBorder(x0,y0,x1,y1) to ImageMiscOps
  * Created ImageNormalization for normalizing input images to be zero mean with values around 1
  * Added blur where you can select a different radius along each axis
    - Mean and Gaussian
  * PixelMath.log() no longer has the 1 + hard coded. Any arbitrary value can be put there.
  * Created ConvertImageMisc and added code to convert F32 to U16 images
  * Hough Polar Gradient type casted a float to an int when it shouldn't have
  * Added generalized function for copying rows and columns from images
  * Added the ability to make a copy of an ImageBorder
  * Mean filter now supports different image border methods
  * Added ImageMiscOps.growBorder() to create a new image that is the src image plus a border
  * Added GrowBorder for extracting rows and columns from images with borders added
  * Rectified images can now be adjusted using the rectified rotation for better usage of space
  * ConvolveImageMean can now handle non symmetric regions
- Template Match
  * Fixed bug where if the template matched the input image it would not be processed
    * Thanks waicool20 for reporting this bug
  * Functions which maximize and minimized have specialized code
    * Fixed edge cases where having a border of zero messed things up
  * Sum Squared Error (SSE) produces similarly scaled numbers for U8 and F32 now
  * Added Sum Absolute Difference (SAD) error
  * Updated error names to make them more common
- Concurrency
  * PixelMath now only uses concurrent algorithm when input image is more than 10,000 pixels.
    Going MT on small images caused Circulant tracker to slow down.
- Demonstrations
  * Updated DenseFlowApp
  * Updated VisualizeRegionDescriptionApp
  * Updated VisualizeAssociationScoreApp
  * Updated VisualizeImageSegmentationApp
  * Updated VisualizeStereoDisparity
  * Three view handles 90 degrees out of orientation images much better
- Fixed bugs related to processing 1-band planar images
- Stereo
  * Improved high level API
  * Concurrent block matching disparity
  * Support for U16 images
  * Block Matching can now be scored using Census and NCC
  * Added Semi-Global Matching (SGM) with several options for score functions
- SFM
  * Projective camera with lens distortion
- Chessboard Detector
  * Renamed previous detector to ChessboardBinary since it uses a binary image
  * Created a new XCorner based method which is much more robust but slower
  * Removed the old new detector based on Shi-Tomasi Corner + Binary Threshold
    - About the same speed and as reliable as Chessboard Binary. Maybe it just needed more development

---------------------------------------------
Date    : 2019-July-07
Version : 0.34

- Applications
  * Added batch QR Code scanner
- Examples
  * Added corner detector
- BinaryImageOps
  * Added concurrent implementations
  * Modified edge so that outside pixels can be treated as 0 or 1
  * Block threshold can now handle images smaller than the block size
  * Global threshold algorithm can now have the threshold scaled
- Line Detectors
  * Created a new interface which takes in image gradient
  * Improved merging algorithm for hough polar where it was pruning any line that interested inside the image
  * Hough Line Foot now parameterizes using a soft rule
  * Added mean-shift refine to foot
  * Added a binary input variant on Hough Polar
- Removed some reflection code for image gradient
- Concurrent code for ImageDistort
- Demonstrations
  * modernize mosaic and stabilize
  * modernized hough polar and foot
- Examples
  * Android example disables threads if SDK is prior to 24 due to lack of Java 1.8 support
- ImageStatistics
  * Added support for Planar images. Thanks thhart for the suggestion
- Feature Association
  * Concurrent version of Greedy Association
  * Concurrent version of Nearest Neighbor Association
  * Concurrent version of Random Forest Association
- Feature Descriptors
  * Concurrent SURF, SURF Color
- Added configuration for Harris and Shi-Tomasi corner detectors
- Average Down Sample has concurrent versions
- PixelMath added logSign to handle images with positive and negative values
- Split apart calibration detector configuration and shape configuration
- Chessboard Detector 2
  * Rewritten from scratch using a new type of corner detector
  * Better handling of blurred and fisheye images
- Simulation
  * Concurrent version of SimulatePlanarWorld
- Concurrent version of template matching
- Android
  * Thanks sergiuchuckmisha for fixing a bug/type-o in FOV estimation
  * Possible fix for a failed resolution change
- Geometric
  * Added Projective N-Point (PRnP) algorithm using DLT

---------------------------------------------
Date    : 2019/03/18
Version : 0.33.1

- Fixed QR panel list in demo app
- FileBrowser now lists directories first
- Demonstrations
  * Removed redundant association apps
  * Updated association so that you can select your own pair of images
  * Worked around a bug in mimetype in JDK 1.8 in OS X
  * Error reporting if image failed to load
  * Modernize contour edge

---------------------------------------------
Date    : 2019/03/14
Version : 0.33

- Fixed JavaDoc issue. Was not copying over doc-files
- Renamed PinholeRadialTangent camera model to PinholeBrown
  * More concise name which resulted in class names being more consistent without abbreviations
- Sparse Bundle Adjustment
  * Added calibrated homogenous coordinates
  * Added support for rigid objects
  * Added universal omni camera model (fisheye)
  * Made Brown camera model complete (e.g. N radial, tangential, force params to zero)
  * Added support for quaternions
- Dense Bundle Adjustment
  * Added for degenerate systems which are small enough to be solved with a dense method
  * Note: This statement seems to be a bit hit or miss. Not sure why, but it doesn't always converge when sparse does.
- Geometry
  * HomographyDirectLinearTransform has been updated to take 2D points, 3D points, and conics as inputs.
- Fixed Rodrigues Jacobian for zero rotation
- Camera Calibration
  * Renamed radial-tangential model to Brown for consistency and brevity
  * Fixed type-o in Omni Universal math. Recalibration does not appear to be necessary
  * Non-linear optimization is now performed using sparse bundle adjustment
    - This appears to be slightly worse than the original dense method in nearly degenerate geometry
- Improved Support for U16 images
  * Convolution, blur, ... etc
  * Requested by Nico Stuurman
- Resize Output Images Instead of Exception
  * PixelMath
- Image Thresholding
  * Added Li
  * Added Huang
  * Ported from ImageJ by Nico Stuurman
- ImageBandMath
  * Added by Nico Stuurman
- QR Code
  * Added support for ECI, i.e. more character sets
  * Changed default BYTE mode encoding to default to UTF-8, but attempts to see if it could be another encoding
  * Ability to change byte encoding. UTF-8 is the default now
  * Add perspective data set to regression.
  * Improved handling of high version QR Codes. Thanks Prabu for discovering this problem and providing examples!
  * Fixed location of alignment patterns along the y-axis. This mostly affected higher version QR
- PerspectiveOps
  * Fixed bug in convertPixelToNorm() where it called distort instead of undistort. Thanks Tianyi
- Demonstration
  * Modernized VideoTrackerPointFeaturesApp
  * Modernized FFT Demo
  * Modernized Blur Demo
  * Modernized Image Derivative Demo
  * Three View Stereo
    - Using AverageDownSampleOps to avoid aliasing and drastically improves performance
    - Selects best pair automatically for stereo processing. Before it was always image 0 and 1.
- Tracking
  * Detect-Describe-Associate (DDA) tracker would let the number of tracks grow unbounded.
    It now randomly selects unassociated tracks if there are too many.
- Swing
  * Touch pad "wheel" controls are less spastic in OS X
- Gradle
  * Fixed how dependencies are referenced and Jars built. Thanks H1Gdev for pointing out this problem!
- Image Distortion
  * Changed interface for PixelTransform and PointTransform to support concurrency
- Concurrency
  * Added support for concurrency. On by default. Can be turned OFF using BoofConcurrency.USE_CONCURRENT = false
  * Created AutocodeConcurrentApp for generating threaded code from single thread algorithms
  * Created IntRangeConsumer for parallel code that processes a range of numbers in a block
  * Convolution: general, sum, mean, gradient
  * Threshold: Local, Block
  * Color: HSV, LAB, RGB, XYZ, YUV, NV21, YV12
  * Misc: PixelMath, ImageStatistics, Non-Max, Non-Max Candidate, ConvertImage, ConvertBufferedImage,
          EhanceImageOps
  * Feature Intensity: SURF, SSD Corner
- Examples
  * Removed Lena as default image since that image is no longer considered appropriate by some journals.
     - https://en.wikipedia.org/wiki/Lenna

---------------------------------------------
Date    : 2018/12/26
Version : 0.32

- Internally using URL to load resources (e.g. images, videos) to enable running inside of jars
- Demonstrations / Examples
  * Colorized code
  * Updated detect line demo
  * Updated image enhance demo
  * Two view uncalibrated stereo re-written from scratch
  * Three view uncalibrated stereo
  * Visualization for three view associations
- Fiducials
  * Several implementations were not properly performing sparse undistort of contours.
  * This was fixed but might cause a noticeable performance hit, e.g. 5% to 25%.
  * If radial + tangential terms are close to zero you can just remove them and not experience this slow down.
- Applications
  * All applications have a GUI
  * Centralized GUI for launching
- QR Code
  - QrCodeDetectorPnP can estimate 6-DOF pose from a QR
  - Encoder does a better job of rejecting invalid QR configurations
  - Detector can optionally estimate in undistorted image coordinates
- Changed Fiducial stability calculation to use 4 synthetic corners as way to improve speed
- InterleavedU8 and Planar<GrayU8>
  * Added set32/get32 and set24/get24
- ConvertImage reshapes output instead of throwing an exception
- LensDistortion
  * Fixed transformChangeModel() it was undistorting twice when it should have undist then dist
  * Split some of the code between F32 and F64
  * Bound now works on arbitrary distortions
- ImageDistort
  * Can compute a mask that indicates which pixels were outside of the source image
- Geometry
  * Fixed bug in Linear Trifocal Tensor estimator
  * Robust trifocal tensor estimation
  * Decompose absolute quadratic
  * Convert projective to metric camera matrix
  * Fixed bug in decomposeMetricCamera
  * Refine triangulation for projective geometry
  * Improvements to factory methods
  * Fundamental matrix from camera matrix
  * Consistent camera matrices from three fundamental matrices
  * Cleaned up naming scheme for triangulation algorithms
  * Refine three view camera matrix (i.e. trifocal tensor)
  * Many more new functions/algorithms added
- Rectification
  * Can apply a mask to disparity to remove false matches caused by image border in rectified images
- Self Calibration
  * Plane at infinity given intrinsic parameters
  * SelfCalibrationGuessAndCheckF based on "Pratical Autocalibration" 2010
  * Linear rotation with different values in each frame
- SFM
  * Improvements to projective bundle adjustment
  * Projective scene structure pruning
- ImageInterleaved
  * setTo() changes number of bands if needed
  * Improved speed of Interleaved to Gray average
- Android
  * Bunch of bug fixes
  * Extracts the full pinhole calibration matrix from camera characteristics

---------------------------------------------
Date    : 2018/10/16
Version : 0.31

- VisualizeCamera2Activity
 * Fixed example
 * Removed lock from bitmap in VisualizeCamera2Activity for performance
- ImageMiscOps
 * Added extractBand()
- Updated gversion to fix problem when built from a directory other than project base
- Fixed problem with Java applications
 * Can't use implementation when specifying dependency in this situation
 * Thanks Andy Thoma for reporting the problem
- ImageMiscOps
 * Added interleaved support for copy, rotateCW, rotateCCW
 * Thanks Frank Jakop for the suggestion
- Geometry
 * Projective triangulation for uncalibrated cameras
 * Added EssentialResidualSampson for computing sampson error in pixels for calibrated cameras
 * EpipolarMinimizeGeometricError
 * Trifocal transfer functions
- Sparse Bundle Adjustment
 * Most basic version using DDogleg and EJML sparse LM solver
 * Works with calibrated pinhole camera
- Scene Reconstruction
 * Matches images and provides an initial estimate of geometry
 * Support for calibrated. Still a work in progress
 * EstimateSceneUnordered for image sets which are unordered
- Visualization
 * JavaFX based point cloud viewer
 * Greatly improved BoofCV's built in point cloud viewer. Runs better than JavaFX
- Thresholding
  * Added NICK thresholding for old documents
- SimulatePlanarWorld
  * Only renders surface when the normal is facing the camera
  * Added unit tests to ensure that all flipping/mirroring is handled correctly
- Switched to JUnit5
- QR Code
  * When scanned it now indicates if multiple modes were used

---------------------------------------------
Date    : 2018/05/21
Version : 0.30

- Renamed HomographyLinear4 to HomographyDirectLinearTransform
  * More consistent with the literature
- Added HomographyTotalLeastSquares
  * Computes the homography gives a set of associated 2D points
  * About 4x faster than DLT
  * Mathew Harker and Paul O'Leary "Computation of Homographies"
- PNP
  * Added IPPE; Collins, Toby, and Adrien Bartoli. "Infinitesimal plane-based pose estimation."
- QR Code
  * QrCodeGeneratorImage automatically has a white border
  * Fixed crash bug if it estimated a version 0 QR
  * If possible, it will recycled binary image instead of creating a copy internally
- Square Fiducials
  * If possible, it will recycled binary image instead of creating a copy internally
- ImageType
  * Added setTo() and isSameType()
- ImageMultiBand
  * Added reshape(width,height,numberOfBands)
- Android
  * Support for camera2 API
- ImageConvert
  * Added convert between planar and interleaved of different data types
- Fast Corner
  * Improved efficiency by changing how points are sampled
  * Added a variant which doesn't compute feature intensity
- PointTracker
  * Can handle multiple sets of detected features, e.g. min and max features
- Stoppable
  * An interface for gracefully exiting a long running process
  * MeanShiftSuperPixel, SLIC
- ColorFormat added to specify different formats for visible light
- Calibration
  * Fixed issue with chessboard patterns when they are very close
- AdjustPolygonForThresholdBias
  * Handles case where a point is shifted and becomes a duplicate
- ImageZoomPanel
  * Saving the view saves what you see exactly now
- Binary Contour
  * New external only contour algorithm
  * About 1.35x faster on average and in some situations 10x faster
  * Contour finding now has two high level interfaces
  * Optional interface for implementations which provide access to padding settings.
- PolylineSplitMerge
  * Minimum side length is enforced fully now
- Simplified transforms to equirectangular images

---------------------------------------------
Date    : 2018/03/18
Version : 0.29

- Changed minimum Java version from 1.7 to 1.8 since Android now supports 1.8
- Manual zoom added to ImagePanel
- QrCodeDetector
  * Fixed crash bug in position pattern detector. Complex B&W patterns could cause OOB
- Image Thresholding
  * general otsu specifies pixel min/max with a double not an int
- Stereo Calibration
  * Moved detector to be outside of the main calibration class
- Demonstrations
  * Moved menubar to the correct location
  * Tweaks for Mac OS X
  * Improved several applications
- Images
  * Gray images support createSameShape(type)
  * Added matchShape() to replace the more verbose reshape(image.width,image.height)
- Contours
  * Created an interface for finding contours in a binary image
  * Provided a way to override Chang2004
- GImageMiscOps
  * fillUniform wasn't actually inclusive on upper limit for integer values
- ShowImages
  * showWindow() adjusts preferred size to handle the case where the image is larger than the monitor
- QuadPoseEstimator
  * Can specify if input is in pixels or normalized coordinates
  * Deleted unused code that was sketchy
  * Added function to go from a pixel to a point in the marker frame
- Added GVersion class that is automatically generated and contains build related information
- PolylineSplitMerge
  * Added support for segments which don't loop
  * Fixed Bug where if a segment was the minimum length exactly it could still be split
- SplitMergeLineFit
  * Deprecated and will be removed soon
  * PolylineSplitMerge now has all of its functionality and out performs it
- FFMPEG
  * Suppressed warning message that has been spamming stderr
- Camera Calibration
  * Tweaked API so that you process the image outside and pass in the results
  * GUI: For universal omni the undistorted window is automatically scaled based on image size
- ImageConvert
  * Faster technique to convert between interleaved and planar
- MultiCameraToEquirectangular
  * Correctly handles NaN in equiToCam transform
- Started using @Nullable and @Nonnull
  * Primarily in factories where if a config can be null or not is confusing
- ConvolveImage* refactoring
  * Removed WithBorder from class name for simplicity
  * Made naming more consistent in general
- BackgroundModel
  * Added a combined function for update and segment
  * Added new algorithm. Gaussian Mixture Models (GMM)
- FiducialDetector
  * Added an optional function which can return the fiducial's boundary
  * Updated demo app to visualize all the information it can return
  * setLensDistortion() now takes in image width and height. This is done to enable precomputing of distortion
- ThresholdLocalOtsu
  * Fixed bug where it was always trying to use a region of size 0
- BOverride
  * Added more overrides and improved API
  * Used by BoofCPP to call C++ Code
  * https://github.com/lessthanoptimal/BoofCPP

---------------------------------------------
Date    : 2018/01/20
Version : 0.28

- Black Polygon Detector
  * Can detect polygons using contour, then on an individual basis refine them now. Before it was all or nothing.
  * Prune contours based on edge intensity earlier
  * Removed refine corner for black polygon detector
    - Was complex, didn't fit the new API, and calibration residuals got better once removed.
  * Added option to optimize by fitting lines to the contour
- Chessboard Detector
  * Improved performance on larger image by making thresholding region relative to image size
  * Has known issue on larger images where a little bit of blur can join squares together.
- Background Model
  * Fixed a weird edge case that happened when you passed in a 1x1 pixel image
- Removed Asymmetric Circle Grid
  * Less space efficient than Hexagonal Grid
- Added Hexagonal Grid
  * Similar to asymmetric but in Y direction is now (x spacing)*2.0*sin(60 degrees).
  * Asymmetric was the same along both axises
- Demonstrations
  * Open files will remember the last directory it opened
  * Added list of recently opened files
  * Dialog for opening a webcam
  * Added fisheye calibration
  * Added background removal
- Examples
  * Added ExamplePointDeformKeyPoints
  * Added QR Code Detector
  * Added QR Code Encoder
- Application: Calibration Target Generator
  * Added circle hexagonal
  * Output is a PDF document now
  * Has a GUI
- Application: Camera Calibration
  * Support for omni universal model
  * Can choose to save output in OpenCV format
  * GUI for configuring calibration
- DetectPolygonFromContour
  * Fix a bug where labeled image was not being resized if the height of input image changed
- BinaryEllipseDetectorPixel
  * Adjusted detected ellipse to remove bias caused by fitting to a binary image.
- BOverrideClass
  * Provides a framework for overriding some functionality in BoofCV with an external implementation without changing your code
- DetectCircleAsymmetricGrid
  * Fixed issue where it picked the wrong circle for the initial corner
- Gradle
  * fixed gradle not copying over doc-files
- Changed directory structure to gradle standard to better integrate source code from other languages
- FiducialDetectors
  * Provide access to detected points in PNP detector. Thought this was done a while ago...
- Binary Thresholding
  * Region size is now specified using ConfigLength and as a width instead of a radius
    - Width makes more sense and is less restrictive. Can be specified as a relative to image size now too.
  * Renamed classes/functions to remove redundancy and clarify
  * Changed ImageToBinary to remove pointless bounds list and simply code
  * Added BLOCK_MEAN
  * Added BLOCK_OTSU
  * Added LOCAL_OTSU
- OTSU Threshold
  * Added Otsu 2
    - Also seeks a threshold which maximizes the distance between the two distributions
    - Can handle binary images much better when Otsu fails to select a reasonable threshold
- Created ConfigMinimumSize
  * Provides a way to specify the size of an object as based on input image size or an exact pixels
- ImageZoomPanel
  * Draws to a buffer first which fixes a major problem on some JVM implementations have a very slow render
- LinearContourLabelChang2004
  * Added ability to stop recording contours which exceed a maximum size
  * Added ability to not record internal contours
- Added HistogramStatistics
  * Thanks Marius Orfgen for the idea and code
- TrackerObjectQuad
  * Added ability to provide a hint for where the object is now
- JavaCV
  * Provided support for reading webcams using JavaCV. Seems to work better than Webcam Capture in some ways
- Created interface for contour to polyline. PointsToPolyline
  * Added ability to set min/max number of sides. convex
- DecomposeHomography
  * Can now handle the case where the scale factor is not equal to one
- QR Code Support
  * Detector and Decoder
  * Renderer and Encoder
  * Application for creating documents and images
- Android
  * Faster RGB to Boof Image. Suggested by giulionf

---------------------------------------------
Date    : 2017-08-16
Version : 0.27

- ImagePanel: Expanded click middle mouse to save image
  * Was a secret new feature in the last release
  * Added to ImageZoomPanel
  * Opens a dialog letting the user know what just happened with option to be silent
- ImagePanel: Now has a function for just calling repaint around the image
- Renamed module visualize to visualize-swing
- Added integration/visualize-javafx
- camera distortion models
  * Unrolled matrix inverse in pinhole and radtan
- Equirectangular
  * Added PinholeRadialToEquirectangular
  * Fixed the meaning of latitude and longitude being swapped.  Thanks xzfinet
- Updated generics to take advantage of Java 7 more
- Image Pyramids
  * PyramidDiscreteSampleBlur supports generic images
- ConvolveDown
  * Added an interface
  * Added planar image support
- Support for Interleaved Images Added to
  * ConvolveWithBorder
  * ConvolveNormalized
- AverageDownSample
  * Made image generic
- Renamed for consistency
  * Kernel2D_I32 -> Kernel2D_S32
  * Kernel2D_I32 -> Kernel2D_S32
- GConvolveImageOps actual works for all image types now not just gray
- Changed behavior of ConvertBufferedImage
  * When converting to interleaved and planar images the number of bands is adjusted to match the buffered image
  * Buffered -> BoofCV: output images are reshaped to match input
  * Removed references to private sun classes for Java 9 compatibility
- ImageInterleaved
  * Added a nicely formatted toString()
- BlurImageOps - Fixed bug where for planar imges it was apply a median instead of mean filter
- FactoryBlurFilter - Can now handle image types other than gray scale images
- LensDistortionOps
  * New function which lets you re-render an image with an arbitrary camera model
  * Removed the imageRemoveDistortion() and relation functions since the new function is better.
- Demonstrations
  * Added RenderSyntheticCamerModelApp which shows you the effects of re-rendering the camera model
  * Removed ShowLensDistoriton since it is now redundant
- Added image distortion based on "Image Deformation Using Moving Least Squares"
  * See ImageDeformPointMLS
- Planar Images
  * setTo will adjust the number of bands
- Updated for full support of F32 data type in dependent libraries
  * EJML -> ddoglog -> GeoRegression
- Fixed calibration target generator app from printing out the wrong target type for asymmetric circles
- Fixed and updated Android example
- Android
  * ConvertBitmap will reshape BoofCV images to match the input Bitmap when converting
  * Refactored functions names with multi to planar
- Fixed visual odometry path viewer so that the camera behaves in a same fashion when the window is resized
- Multi View
  * Split EnumEpiloar into EnumFundamental and EnumEssential to make it clearer
  * Updated functions in FactoryMultiViewRobust for change
- Calibration Targets
  * Added support for circle grid pattern in generator app
  * Added support for detection of circle grid patterns
  * Calibration targets with circles now specify circle size with diameter instead of radius
- Gradle
  * Change directory structure to avoid jar naming conflict on maven central.  Idiotic that this is even possible...
- Imaga Data Types
  * Fixed ImageInterleaved.setNumBands() NOT correctly setting the stride and growing the data array
- Removed XML all serialization
  * Changed old XML files into YAML files
- YAML format for camera calibration
  * Added version parameter.  Assumed to be 0 if not present
- Fixed histogram in ImageStatistics
  * For unsigned data types minimum value was being ignored
  * Thanks André Ambrósio Boechat for reporting the problem
- ApplicationLauncherApp
  * Thanks Jalal Khan for completing and going beyond what was required in the Bounty!
  * Displays source code, GitHub button, search, and various other improvements
- ConvertNV21 and ConvertYV12
  * Speed up conversion from NV21 to RGB by about 1.9x by converting if statements into bitwise operations
  * Refactored functions names with multi to planar
- Split FFMPEG and JavaCV into separate dependencies
- You can now specify which native architectures you wish to support
  * See native_arch gradle parameter
- ImageMultiBand added setNumberOfBands()

---------------------------------------------
Date    : 2016/12/07
Version : 0.26

- Fixed a long standing unit test issue where convolve unit test would some times on some systems erratically fail
  * Appears that sometimes the random numbers caused a numerical overflow for U8 images
  * Now why it didn't have the exact same numbers every time when it has a fixed seed is disturbing...
- Renamed EquirectangularTo* to *ToEquirectangular
  * Those classes convert pixels in * coordinates into their location in the equirectangular image
  * They are used to generate a * image from equirectangular
- Float 32bit auto coding switched over to using auto64fto32f library
- TypeInterpolate is now InterpolationType for consistency
- Examples
  * InterpolatePixel added
  * Image blur added
  * Non-Maximum Suppression added
- Demonstrations
  * Improved DemonstrationInterpolateScaleApp (renamed also)
  * Added DetectBlackEllipseApp
- Gradle
  * Will fail on dependency version conflict now
  * Will fail when building release with SNAPSHOT dependencies
  * Resolved xstream version conflict
- Updated DeepBoof
  * This is to get around an issue with a java wget library where it would hang instead of giving up
  * New code is also much more informative and prints out size info and download status
- Visualization
  * Removed a bad +PI/2 from ellipse rendering.
- SnapToEllipseEdge - Fixed bug where it was only performing one iteration no matter what
- Circle Asymmetric Grid Target
  * Fixed issue which was causing clusters not to form by not limiting number of neighbors within X distance
  * When clustering ellipses orientation and major/minor axis size is now taken in account.
  * Significant net improvement in regression tests, only drop in performance in blurred images

---------------------------------------------
Date    : 2016/12/01
Version : 0.25

- Black Circle Detector
  * Binary image
  * Subpixel edge for gray scale images
- Circular Asymmetric Grid Pattern
  * For calibration
  * As a general fiducial
- Histogram of Oriented Gradient
  * Provided another implementation which is more faithful to original paper, but much slower
  * Can now independently configure block size along each axis
- VideoTrackerObjectQuadApp
  * Can now open webcams and videos
  * Improved UI
- Association
  * Added helpful error messages when src and dst are not set
- Added support for F64 to F32 autocoding from regular F64 classes
- 360 / Spherical camera support
  * Equirectangular image support
  * Equirectangular to pinhole
  * Equirectangular to cylinder
  * Equirectangular rotate
- Dirty flag was not being set to false for cached image distort single band
- Changed minimum Java language level from 6 to 7
- Camera Model
  * Renamed IntrinsicParameters to CameraPinhole
  * Broke distortion off into a separate class which extends CameraPinhole
     - CameraPinholeRadial
  * Added a new camera for wide FOV cameras: Universal Omnidirectional
  * Created new transforms to handle non-pinhole cameras
- YAML
  * Changed save format to YAML for camera model parameters.
  * This should allow saved files to be independent of internal refactoring in BoofCV and cross platform, I hope.
- Deleted BoofAndroidFiles because you can now simply use yaml format
- Deep Learning
  * Integrated in DeepBoof to provide support for deep artificial neural networks (ANN)
- Image Classification
  * VGG trained on CIFAR10  (10 categories at 89.9%)
  * Network-in-Network trained on ImageNet (1000 categories at 62.6%)
- FiducialDetector
  * Takes in a distortion factory instead of camera parameters
  * Added getIntrinsics()
  * Added getImageLocation()
  * Fixed bug where if a lens model with distortion was used then exchanged for one without the old distortion was not fully removed.
  * Fixed bug where if intrinsic was not set it would still claim it could estimate the target's pose
- Binary Fiducial
  * When decoding the image it now ignores border pixels of inner squares.  These tend to be very noisy.
  * 7% improvement in regression test.  Idea taken from ArUco
- Commandline Fiducial Generator
  * Can specify custom document size
- Added command line application for calibration fiducials
  * Supports chessboard, square grid, square binary grid, circle asymmetric grid
- OpenCV Integration
  * can read and write camera calibration for pinhole cameras with radial + tangential distortion
- FancyInterestPointRender
  * Fixed addString() being a no-op.  Thanks R-Gerard for the bug report!
- Generate Square Fiducial Applications
  * The post script format has been tweaked so that the page size is specified with the /PageSize command also
  * A printing company was having issues correcting sizing the document until this change was made.
- Refactored FactoryCalibrationTarget -> FactoryFiducialCalibration
- FactoryMotion2D
  * Removed image type specific functions and updated code for more recent API
- Fixed bug in StitchingFromMotion2D where reset() could cause a null pointer exception
- Android
  * work around for a crash bug in Marshmallow
- Removed applet module in integration
- Template Matching
  * Added correlation using FFT
  * Tweaked API so that preprocessing of image can be performed
- TypeInterpolation renamed to InterpolationType for consistency
- Changed behavior of AssociateSurfBasic
  * no longer throws an exception if src or dst features are empty

---------------------------------------------
Date    : 2016/06/13
Version : 0.24.1

- Previous stable release accidentally referenced a SNAPSHOT of georegression

---------------------------------------------
Date    : 2016/06/04
Version : 0.24

- Confusion Matrix Visualization
  * Fixed bug where a row/column was being lopped off
  * Added labels
  * Added ability to highlight one category
  * Added ability to query what's at a specific location
- Local Image Normalization for use in machine learning
- Added weighted RGB to Gray conversion with example
- Convolve
  * Better support for 64-bit float images
- Module "core" (formally "all") can be used to import everything in boofcv/main
- Module "all" can be used to import everything in boofcv/main AND boofcv/integration
- Adjusted assisted calibration so that it's possible to provide a custom output directory
- Video
  * Xuggler's Maven repository was taken down.  Effectively killing the zombie project
  * JavaCV has been integrated in as a replacement.

---------------------------------------------
Date    : 2016/03/27
Version : 0.23

- Refactored image data structure names for consistency and brevity
  * Sorry for the massive refactoring
  * ImageUInt8 -> GrayU8
  * MultiSpectral -> Planar
  * Interleaved is unchanged
- Removed Alpha from version name since it was pointless and non-informative
  * Will hit 1.0 once a (good) face detector is added
- Updated dense descriptor configurations to include a default sampling period
  * SIFT, Fast SURF, Stable SURF
- FactoryDescribeImageDense
  * Now accepts null for configuration and creates a default
- FactoryOrientation
  * SIFT now accepts a null argument.  Thanks pcmoen for pointing out this bug.
- ImplOrientationImageAverageIntegral
  * Fixed internal null pointer exception
  * Fixed bad unit test
  * Thanks pcmoen for pointing out this bug
- Hamming Distance
  * New algorithm from Sean Eron Anderson Bit Twiddling Hack
  * 68 times faster than equivalent older code
  * 8 times faster than a lookup table!
  * Thanks pcmoen for finding this gem and the pull request
- FactoryDerivative
  * Deleted type-specific functions
- BorderType.VALUE is now ZERO because it always defaulted to zero

---------------------------------------------
Date    : 2016/03/04
Version : Alpha 0.22

- Deleted MedianImageFilter
  * Use BlurStorageFilter instead.  Create with FactoryBlurFilter
- Applications package now uploaded to Central
- CameraCalibration
  * Made internal data structures and function protected to make it easier to extend by an external class
  * Fixed bug where visualization artifacts were being saved to disk
- Implementation of ImageGradient for MultiSpectral images
- FactoryDerivative
  * Can now create derivatives using enum type
- Added Histogram of Oriented Gradient (HOG) dense image descriptor
- DescribeImageDense
  * Removed configure() since it couldn't be generalized to HOG
  * Created config classes for all dense descriptors
- No argument constructor in most image types
  * Fixed bug where defaultType was not being set.  Thanks pcmoen for reporting the bug
- Fixed bug in ConvertBufferedImage.extract where number of bands in interleaved images was not being set in ImageType
  * Fixed bug where defaultType was not being set.  Thanks pcmoen for reporting the bug
- PixelMath
  * Added partial support for Interleaved images
  * GPixelMath supports more than just single band images
- ImageStatistics
  * Added partial support for Interleaved images
  * GImageStatistics supports more than just single band images

---------------------------------------------
Date    : 2016/01/24
Version : Alpha 0.21

- Scale-Space Features
  * getScale() has been replaced with getRadius(), which refers to the radius of the detected object
- SURF
  * Fixed a bug dealing with gradient calculation and improved stability for very small objects
  * Exposed an inner parameter.  You can now change the kernel size increment between scales
- WebcamTrackFiducial renamed to FiducialDetection
  * Can now process more inputs sources;  still images, videos, and webcams.
  * Output to a file is a possibility
- Renamed SurfFeature to BrightFeature
  * Used by SURF and SIFT, so the name was made more generic
- SIFT
  * Complete rewrite of detector and descriptor
  * Very similar to original paper by Lowe
  * One difference is the use of quadratic interpolation instead of the overly complex thing that Lowe proposed
- Dense SIFT
  * Optimized code for computing dense descriptors at a fixed scale in a grid across the entire image
- Black polygon detector
  * can now handle features along image border
  * fixed a couple of bugs inside refine function too
  * improved false positive rejection (e.g. squarish bright lights)
- Square Fiducials
  * Threshold is now done using the average of pixel intensity along the fiducial border
  * Image border is used to remove false positives
- Change / Clarified behavior of non-maximum suppression classes
  * Border refers to the border around the image in which extremes cannot be found
  * A pixel inside the border can have a value larger than one inside the image and prevent it from being considered
    an extreme
- FactoryPlanarCalibrationTarget renamed to FactoryCalibrationTarget
- Improved visualization in ShapeFitContourApp
- ConvertImage
  * Interleaved to MultiSpectral
  * MultiSpectral to Interleaved
  * Any single band into into ImageUInt8 with the specified pixel value range
- Chessboard detector
  * Links squares together using corners instead of two independently detected grids
  * Can now detect targets in which the outer squares have been clipped by the image's border
- Square Grid Detector
  * Changed how the pattern is specified.  Based on black squares now
- DetectLineHoughPolar
  * Fixed issue were a strict non-maximum was used when a non-strict was needed, causing valid lines to be discarded
- WebcamCapture
  * Provided an easy to use function that allows you to open devices by their /dev name
- Image Thresholding: LocalSquareBlockMinMax Added
  * Breaks the image up into a grid and computes the min and max pixel value, which is used to compute a threshold
  * Enabled the detection of black objects partially outside the view
  * Is very fast
- Android
  * Will automatically detect if image needs to be rotated 180 degrees and then does it.  Needed for the Nexus 5x

---------------------------------------------
Date    : 2015/11/09
Version : Alpha 0.20

- Improved pose stability of calibration targets as fiducials
  * Turns out they were using a linear estimate only
  * Now uses EPnP followed by a few steps of non-linear refinement
- PerspectiveOps.createIntrinsic() which creates intrinsic parameters from a known FOV and image shape
- New WebcamInterface and some examples now can run on your webcam
  * Requires WebcamCapture
- ExamplePointFeatureTracker has colorized points to make it easier to identify the same point
- Polygon Detector
  * Simplified code by removing requirement the CW/CCW must be known by helper classes
- BinaryPolygonConvexDetector
  * Much improved performance on non-square like shapes
  * Stability is much better on very small shapes
- Merged data/applet and data/evaluation together
  * Renamed to data/examples
- Renamed package boofcv/evaluations to boofcv/demonstrations
  * It no longer served as a place for benchmarks
- VisualizeBinaryData
  * Marked buffered image as dirty when rendering a labeled image
- Removed Processing from project
  * Might spawn into its own project if there is more interest in the future
- Binary Thresholding
  * Created a generic config class which supports all current types
- Square Fiducial Generator App
  * no longer defaults to a page border of 1cm
  * page border is actually user configurable
  * border and white border are correctly handled
- Square Binary Fiducial
  * Can now handle grids with arbtirary widths!
    - Thanks Nathan Pahucki npahucki@gmail.com for submitting this pull request
  * The width of the border can now be adjusted too
- Moved PyBoof to it's own repository at https://github.com/lessthanoptimal/PyBoof
  * It will be update on its own cycle
- Chessboard Detector
  * Improved stability especially for slightly blurred images
- PointTrackerKltPyramid
  * Fixed uninitialized variable in one of the constructors.  Thanks ericbhatti
  * Change it from two constructors down to one constructor
- Created built in class for removing perspective distortion
  * RemovePerspectiveDistortion
- Partially observable calibration targets are now supported
  * Mathematically at least.  Targets which can be partially observed are not supported yet
- ConvertBufferedImage.stripAlphaChannel()
  * Can be used to ensure that an alpha channel is not in the buffered image
  * Inspired by an issue pete-experimenter had
- Renamed FiducialDetector to FiducialPoseDetector
  * Done to accommodate fiducials in which you don't care about the pose
- Morphological Thinning has been fixed and tweaked
  * Thanks Emil Hellman who first pointed out the issue and helped solve/improve the implementation
- Locally adaptive threshold techniques that had a bias term now have a scale term.
  * Much more useful since bias was intensity and value range dependent

---------------------------------------------
Date    : 2015/09/20
Version : Alpha 0.19

- Removed -1 from CachedSineCosine_F32
  * Change suggested by Jochem
  * Original code could cause problems for edge cases in hough transform
- Moved BufferedImage to IO package since it is swing dependent
  * Suggested by Baha Elkassaby
- JCodec
  * Formally added it back in since it works on Android videos
  * Added utilities to convert Picture into BoofCV formatted images
- Images can be serialized again
  * Made ImageType serializable now
  * Fixed bug where subimages were not assigned an image type.
- Scene classification
  * Bag-of-Words based techniques
  * K-Nearest-Neighbor classification.  Learning and Classifier
- Image setTo() will now automatically resize the image to match it's input
- Added invert option to visualizing binary images
  * swing and android
- Added in-place CW and CCW image rotation
- Fiducials
  * Image square fiducials can now have their width individually set
  * Square based fiducials now use the new polygon detector and benefit from its improved subpixel
  * Fixed bug where the returned orientation was inconsistent with the JavaDoc
  * Fixed another bug that caused the sides to "flip" depending on view angle
  * Handling of small far away fiducials being viewed head on has improved much
- PerspectiveOps
  * Can render pixel in camera frame using IntrinsicParameters
- Created FactoryMultiViewRobust for simplifying the creation of robust versions of
  solutions to PnP, essential, homography
- Camera Model
  * Support for tangential distortion has been added
  * Intrinsic parameters can now use a flow style assignment of parameters
  * Removed support for flipY to simplify the code.  Just flip the image if this is an issue.
  * Lens distortion.  More abstracted
- LensDistortionOps
  * refactored several functions to make it more consistent and easier to use
  * Change fullView to expand
  * Many functions will now correct for lens distortion.
- Square grid calibration target
  * Fixed.  Multiple bugs were introduced at some point in the past but were not caught due to the
    lack of regression tests
  * Change underlying algorithm.  Now uses polygon detector for corners.
- Chessboard calibration target
   * Complete re-write.  Now uses polygon detector
   * Corner precision appears to have improved and runs faster
- Calibration
  * A single class fully specifies the calibration target now
  * Intrinsic parameters can now use a flow style assignment of parameters
- Interpolation
  * Can specify a border handling algorithm now
- PixelMath
  * Added minus(image,scalar)
  * Added minus(scalar,image)
- Distortion
  * Scale once again goes from in.width/out.width instead of (in.width-1)/(out.width-1)
    - The former is correct, but you have to deal with interpolating values like 9.5 when there are 10 pixels (9 is largest index)
  * Added FDistort
    - Much easier to use and more flexible than the procedural fuctions in DistortImageOps
- FactoryDerivativeSparse
  * Added sobel, prewitt, three, two0, two1
- Gradient Two0 and Two1
  * There are two different ways to define the gradient from two samples, depending on the zero index.
  * Two0 is [1] - [0] and Two1 is [0] - [-1].
  * Before only one of these variants was available
- UtilImageIO
  * Can save an image directly that is in BoofCV format
- Shape Features
  * Corner fitting algorithm that uses the tangent of the gradient
  * Black convex polygon detector
  * Polygon fitting
- ShowImages
  * Will now display any BoofCV image directly.
- Android
  * Can convert from 8888 to 3 channel multi-spectral images
  * Moved NV21 out of Android because it's also useful with Webcams
- Added support for YV12 image format
- BinaryImageOps
  * BinaryImageOps.labelToBinary() now has an easier to use variant.  No need to explicitly declare a boolean array
  * Added thin() operator for thinning/skeletonization
- Template Matching
  * Can provide a mask for a template and effectively make pixels transparent or translucent
  * Requested by Rafael Maus and others
- ConvertBufferedImage
  * Tweaked defaults for boof to BufferedImage.  Single band images return single band images.
    - Thanks thhart for pointing this out
  * Added partial support for images encoded with SunWritableRaster
  * Much improved support of BoofCV Interleaved images
- ThresholdImageOps
  * Changed threshold up from >= to >.
  * Turns out the original choice was bad.  Images were not inverses of each other
  * Was possible the threshold an image with two values up and end up with all 0.
- PyBoof has been added to integration
  * Python wrapper for BoofCV
  * Thanks Romotive allowing donating this code!
- GHistogramFeatureOps, Histogram_F64, HistogramFeatureOps
  * Computes color histograms with the intent that they can be used as features
  * Supports an arbitrary number of color bands
  * Can also be computed from a list of pixel values
  * arbitrary min/max values and number of bins also supported
  * Example added demonstrating how to look up images with similar histograms
- GImageDerivativeOps
  * General cleaning up the API
  * Fewer functions, but uses enum for specific type
  * Function for AnyImageDerivative is clearly named and more useful
- ImageMiscOps
  * fill band and bands
  * insert band
- Background Model / Motion Detection
  * For stationary cameras and moving cameras
  * Basic: pixels modeled with a fading average
  * Gaussian: pixels modeled with a fading Normal distribution

---------------------------------------------
Date    : 2014/9/22
Version : Alpha 0.18

- Renamed ImageSegmentation to ImageSuperpixels
  * Added a unit test which ensures connectivity requirement is meet
  * Fixed issue with SLIC where it did not set its ConnectRule
- Renamed ExampleStructureFromMotion to ExampleMultiviewSceneReconstruction
- Processing
  * Gradle copies over processing JavaDoc
  * Fixed SimpleTrackerPoints.spawn() which did not update the tracks before
  * Added more comments to examples
- Removed Caliper dependency
  * Not designed the way I want it to be and recent changes made it less usable
- Removed v4l4j support since Webcam Capture is easier and does a better job
- Fixed OpenKinect examples
- ImageDistort now supports a different input and output types
  * Support is provided for the same image type
  * It now allows for all types to float 32. Interpolation always outputs a floating point value.
- ThresholdImageOps
  * Otsu's method
  * Entropy based method
  * Sauvola
- Fixed problem in FilterImageReflection where it assumed two arguments but some binary operations have 3 now
- Added pow2 and sqrt to PixelMath
- Added invert to BinaryImageOps
- Added rotateCW and rotateCCW to ImageMiscOps
- FilterImageInterface
  * Reference ImageBase instead of ImageSingleBand
  * Can get output type
- InputToBinary = Interface for converting an arbitrary image into a binary one
  * Added wrappers/implementations for all current thresholding techniques
- Fiducial Detector
  * Square-Binary. Encodes 4096 numbers
  * Square-Image. Detects arbitrary image fiducials contained inside a square.
- Fixed bug in ColorHsv for multi-spectral images
  * Was missing a check to see if saturation was zero
  * Thanks sandreas for reporting the bug
- GConvolveImageOps
  * Fixed generics so it wasn't forcing input and output to be the same type
- Added ExampleConvolution
- Convolution
  * ConvolveNormalizedNaive correctly handles offsets in the kernel
  * 2D convolution correctly supports offset.  Before it used radius no matter what
  * Normalized convolution makes sure the input kernel sums up to 1 for floating point
- Processing
  * Added new thresholding and fiducials

---------------------------------------------
Date    : 2014/6/19
Version : Alpha 0.17

- Improved/Fixed serialization
  * Several classes were missing no argument constructors
- Added ImageMiscOps.flipHorizontal()
- Added WeightSample2D_F32 for computing the weight of a sample in an abstract manor
  * Reduced MeanShiftPeak from 3 classes into one
- Edge Non-Maximum suppression's documentation now clearly states that it suppresses only if adjacent pixel is
  less than.  This is not true non-maximum suppression since it allows equal values but seems to produce
  better results
  * Improved unit tests to explicitly test for this behavior
- Canny edge detector would fail if threshold was zero and the image had no texture
  * HysteresisEdge* code was using a value of 0 to mark traversed regions.  It now uses -1 and sanity checks
    the lower threshold.
  * Thanks Lucaro for finding this bug
- Added GImageMultiBand for generalized access to multi-band image data
- Added support for MultiSpectral images to:
  * GBlurImageOps and BlurImageOps
- Image Segmentation / Superpixels
  * Watershed
  * Mean-shift
  * Felzenszwalb-Huttenlocher 2004
  * SLIC Superpixels
- Dense Optical Flow
  * KLT Based
  * Square Region Based
  * Horn Schunck
  * Horn Schunck Pyramid
  * Brox Spacial Warping
- Fixed bugs in ConvertNV21
  * Was applying YV12 byte alignment to NV21 images.  Depending on image size, this could cause a crash.
- Fixed bug in ImplConvertToBitmap.multiToArray_F32()
  * Didn't handle case where the input image has 3 bands and not 4
- ImageBase now provides a method for getting ImageType information
- Threshold in the interface Associate is now <= instead of <
- Android
  * Added classes which greatly simplify dealing with camera previews
  * Added new visualizations intended for use with segmented images
  * Simplified example code
- Added XYZ and LAB color spaces
- GImageMiscOps.fillUniform() max is inclusive for both integer and float and this is enforced
- BinaryImageOps
  * Erode and dilate can now be applied multiple times with a single function call
- StitchingFromMotion2D can now resize and translate the stitch image
  * Thanks Julien Seinturier for the suggestion
- Convolution
  * 1D convolution now supports kernels which are not symmetric
- Image gradient from a difference of two neighbors added
- Square grid calibration grid detector has been improved.
  * No longer permutes through all combinations.  Selects each valid square and assumes its the first instead
  * Graph connection rule has been improved too to reduce false connections
- Moved serializeXML from BoofMiscOps to UtilIO
  * Removing an IO function which shouldn't be in image processing
- FactoryDerivative
  * If derivative type is null it will use the default
- Added ImageType to interpolate interface
- Added ImageType to ImageSegmentation interface
- Processing (http://processing.org) integration
  * Lots of examples
  * Simplified interface for working with BoofCV
- XStream now works without that ugly hack
  * Thanks to Jörg Schaible of XStream for fixing the issue and all the help
- Webcam Capture Support
  * Easy to use library for streaming webcams
  * Wrote several example showing how Webcam Capture can be used with BoofCV
- Structure From Motion (SFM) example

---------------------------------------------
Date    : 2013/12/25
Version : Alpha 0.16

- Simplified DescribeRegionPoint
  * describe now returns true or false
  * removed isInBounds()
  * removed getDescriptionLength() since it is contained in the description itself
  * added getImageType()
- Feature detection and describing related classes now extend ImageBase to allow support of color image processing
- SURF
  * Laplacian sign calculation doesn't declare new memory for every single feature any more
  * Added a color SURF descriptor
- Fixed SIFT bug which produced a feature with NaN in its descriptor
  * The extractor border was not being taken in account when examining features.  The net result was that the
  localization interpolation would messed up since the center would not be a maximum, causing really bad stuff.
  * Unit tests updated so that it they can detect it.
  * Thanks Lefteris for detecting this bug.
- SURF detector (Fast-Hessian)
  * Was affected in a similar fashion to the SIFT bug.  The fix doesn't seem to change its stability at all.
- NCC error now more "correct" and divides by the number of elements
- Integral image operations now support more image types.  S64 and F64
- KltTracker.setDescription() can now fail due to lack of texture
- Created TrackObjectQuad for tracking user select objects inside an image
  * Added TLD tracker
  * Added Circulant tracker
  * Added Sparse Flow Object Tracker
  * Added various mean-shift trackers
- Created recognition package
  * No other good place to put object trackers
- UtilImageIO
  * Can read PPM from InputStream
  * Can read images from URL
  * Can read/write PGM files
  * Can handle comments in PPM + PGM files
- Moved FastQueue and GrowQueue into DDogleg project so that other projects can use those data structures
- Modified ConvertBufferedImage functions with orderRgb to make it easier to maintain RGB ordering.
  * No need to explicitly call orderBandsIntoRGB() any more
- Change behavior of ConvertRaster so that it does not modify the order of color bands at all
  * Improved unit tests
- Added Fast Fourier Transform
  * Code originally from General Purpose FFT by Takuya Ooura, actual Java code copied from JTransforms
    with minor modifications.
- PixelMath
  * pixel-wise image-to-image multiplication
  * pixel-wise image-to-image division
  * pixel-wise log(1+x)
- ImageMiscOps
  * added copy() for rectangular sub-images
  * limited support for Interleaved images
- ThresholdImageOps
  * Added adaptiveSquare
  * Added adaptiveGaussian
- Convolution and ImageBlurOps
  * Improved accuracy of operations on integer images.  Rounded instead of floored.
- Removed GeoModelRefine and replaced with ModelFitter
- Image Types
  * Improved and renamed interleaved image types
  * Added full support to all primitive data structures in interleaved images
  * Added ImageBase.subimage class variable
  * Added InterleavedImageOps
  * Added ImageMultiBand as a base class for multi-band images.
- Generalized interpolation so that support can be provided for single-band and multi-band images.
  * InterpolatePixelS for single-band
  * InterpolatePixelMB for multi-band
- Fixed sub-image support for ConvertBufferedImage.extract*
  * Thanks pcmoen
- Calibration target detection
  * Locally adaptive thresholding is now used for square and chessboard target types.  Less sensitive to lighting
    conditions
  * Chessboard target detector works much better on small targets.  Uses QuadBlob corners to estimate initial
    calibration point position then uses mean-shift for refinement
  * Chessboard now orders calibration points using QuadBlobs.  Allowing orientation ambiguity to be correctly resolved
    when the target is not symmetric.
- ImplConvertBitmap incorrectly converted floating point images
  * Was doing an integer divide instead of a floating point divide
  * Thanks Vagoster for reporting the bug
- KLT can now track features which partially extend outside the image
- Image Interpolation
  * Almost all interpolation routines incorrectly treated pixels 1 outside of the image as inside.  Unit tests
  have been added and other classes modified for the change in behavior.
- Fixed FactoryDistort.scale().  Off by one error when specifying scale factor
- SearchLocalPeak high level interface
  * For algorithms which perform a local search for a peak
  * Added two mean-shift variants
- New examples
  * Estimating pose from calibration grids
  * Two examples for object tracking
  * How to remove perspective distortion
  * Added video stabilization example
  * Reorganized package structure
- VisOdomDualTrackPnP
  * It is now possible for it to produce a fatal error when all its tracks are lost
  * Computes a descriptor of the feature each time as needed.  Doesn't extract it from the track itself.
    Made the code base more complex.  Maybe old version has a slight runtime speed advantage
- Fixed overflow issue in HarrisCorner_S16 weighted and unweighted
- Improved Maven support by breaking it up into multiple modules
- Fixed bug in UtilWavelet for integer images.  X and Y got reversed in for loop

---------------------------------------------
Date    : 2013/06/21
Version : Alpha 0.15

- Improved automatic thresholding for calibration grids
- Fixed bug in Zhang99 calibration where skew was not being copied
- Fixed stereo calibration bug where if a target was not detected in right image it wouldn't be removed from the left
- Chessboard calibration
  * Support for targets which are not symmetric. Requested by Karim Hammoudi.
  * Much more tolerant of target which are visually small
  * Handles cluttered backgrounds better
- Added support for OpenKinect in integration
  * Added related example code and applications demonstrating how to process its data
- Can read/write PPM images
- Added DepthVisualOdometry for computing visual odometry from a Kinect
  * Added several related classes and interfaces too
- Added MonocularPlaneVisualOdometry for computing 2D motion from a camera when traveling over a plane
  * Two algorithms implement this interface
- Generalized VisualOdometry interface to allow for arbitrary transforms
- Cleaned up VisualOdometry and StereoVisualOdometry interfaces
- Automatic rescaling of images for visual odometry
  * StereoVisualOdometryScaleInput
  * MonocularPlaneVisualOdometryScaleInput
- Added VisualDepthParameters to specify calibration of RGB-D cameras
- Added MonoPlaneParameters to specify calibration of single camera with a known ground plane
- Added DistanceHomographyPixelSq so that the fit error for normalized homography can be computed in image pixels.
- Added MultiViewOps.decomposeHomography().
- Added more support for convert to/from 16bit BufferedImages
- Added DoNothingPixelTransform_F32 for those times when you don't want to do anything
- Added PairLineNorm for sets of line correspondences between two lines
- Added algorithms for computing induced homographies from planes
  * Three points
  * Line and a point
  * Two lines
- Added NearestNeighborPixel_U16
- Added index setters and getters to GImageSingleBand
- CreateSyntheticOverheadView for converting an image into an overhead view when the scene is planar
- Added numBands to ImageDataType
- Fixed type-o in triangulation JavaDoc.  Thanks tverbele
- Fixed bug in SIFT where a change in non-maximum behavior caused features to be detected too close to image border.
  * Thanks lefman for pointing it out
- Fixed ConvertBufferedImage.orderBandsIntoRGB() for ABGR images.  Thanks André Ambrósio Boechat
- Maven build working again.  Thanks JensKapitza for the help.
- Moved boofcv/applet into boofcv/integration/applet

---------------------------------------------
Date    : 2013/04/15
Version : Alpha 0.14

- Added histogram to ImageStatistics
- Calibration target's binary threshold is selected using image histogram to make it more tolerant to shadows
- Calibration grid size does not refer to number of black squares any more.  Instead to number of square total.
- Added image enhancement operations
  * Global histogram
  * Local histogram
  * Sharpen 4 and 8
  * Demonstration to example directory
- Interface for V4L4J to provide webcam support
- ImageMiscOps
  * added fillBorder()
- BinaryImageOps
  * Changed API and algorithms used to label blobs and find their contour
  * New algorithm is about 3x faster in all situations.
- Canny edge has been improved
  * Can be configured to create a binary image output or a set of contours
  * Conour pixels are now ordered and returned as a graph
- Fixed bug in FactoryImageBorder.value()
- Color Models (Added)
  * Added HSV, YUV
  * Added new example demonstrating simple color based segmentation
- XML Serialization
  * Switched over to using XStream since XMLEncoder is broken in Java 1.7.
  * XStream also produces easier to read XML
- Added ConfigFast. Configuration class for FAST feature detector
- Image Pyramids and Scale-Space
  * Added additional functions to ImagePyramid interface that provide information on how the image is sample and the amount of blur in it
  * There is no separate class for updating image pyramids any more.  The image pyramid takes in the input image
  * Scale-Space pyramids have been moved into the pyramid package instead of having its own
  * Bug Fix: FeatureLaplacePyramid now looks for local maximum or minimum in searching across scales
  * Removed GaussianScaleSpace class since it can now be represented using ImageFloatPyramid
- Added ExampleStereoDisparity3D and tweaked the first one
- Shape Fitting (Added)
  * Fit polygon
  * Fit ellipse
  * Usage examples
- BRIEF description computation is 30% faster
- Made it easier to create mosaics from colored images and updated examples
- Generalized several classes so that images other than single band can be used
  * VideoInterface
  * SimpleImageSequence
- Added average down sampling and a related discrete image pyramid
- Android: YUV to RGB now works
- ExampleImageStitching has rendering code pushed into it

---------------------------------------------
Date    : 2013/02/16
Version : Alpha 0.13

- Removed TupleDescQueue
  * Use UtilFeature.createFeature() instead or extend FastQueue
- Fixed bug in ImplSelectSparseStandardWta_* where peak checks for 0 disparity were incorrectly handled
- FactoryPointSequentialTracker tweaked tracker configurations for better SFM performance
- PointTrackerKltPyramid can now create new data to store tracks after init
- Made scale configurable in corner based interest points
- Renamed GeneralAssociation to AssociateDescription
- Added AssociateDescription2D for association with location info
- ScoreAssociateCorrelation no longer takes the abs()
- SIFT
  * Accounts for offset during sub-sampling
  * Documents deviations from paper in pyramid construction
  * Tweaked pyramid construction
  * Tweaked non-maximum suppression
- Improved handling of Max Features in SURF + SIFT
  * All features are considered in order of intensity
  * Features are no longer added once the max has been reached
- Point Trackers
  * Renamed and changed function
  * Created interface for extracting feature descriptions
  * Added variant designed for two pass tracking
- Chessboard and Square grid calibration target detectors
  * Made minimum blob automatically adjust to image size
  * Made it user configurable
  * These changes allow calibration of 320x240 images
  * Fixed multiple bugs/issues so that it detects targets more reliably
- PerspectiveOps.scaleIntrinsic() changes image width/height
- Improved unit tests for MultiSpectral images
- ImageConvert
  * Added support for ImageSInt64
  * Added support for MultiSpectral to SingleBand using average
  * Added GImageConvert
- Code to convert between different types of TupleDesc
- Fixed bug in TupleDesc_F64 SAD scorer
- Added approximate nearest neighbor from DDogleg
  * k-d tree best-bin-first
  * k-d random forest
- Changing the way complex algorithm are configured
  * Instead of passing in parameters to a factory a config class is passed in.
  * Affected: SIFT, SURF
- PixelMath
  * Fixed bug in PixelMath.subtract for ImageUInt8
    - Thanks Paul Dumais for reporting the problem
  * Added PixelMath.invert()
- Associate and ScoreAssociation
  * Added ability to set a threshold via Associate interface
  * Can get a list of unassociate destination features
  * Can determine if the algorithm selects a unique match for source and destination
  * Created MatchScoreType to provide more information on the score's behavior
- Created EasyGeneralFeatureDetector
  * Automatically handles image derivatives
  * Split off from WrapGeneralFeatureDetector
- GeneralFeatureDetector
  * moved to alg package
  * can now detect local minimums
  * Removed ability to segment image.  Turned out to not be all that useful, just increase the size of the non-maximum region.
- Non-Maximum supression
  * Renamed FeatureExtractor to NonMaxSuppression
    - Removed the parameter for requesting the number of returned features
  * All algorithms contained a bug where the ignore border was being incorrectly enforced
  * Added support for detecting maximums and minimums
- Fixed bugs in SortBestFeatures and added sort for negative peaks
- GeneralFeatureIntensity: Added flags to indicate if features are maximum or minimums
- Calibration package was missing from Maven build
- Removed maxMatches from greedy assocaition since its not part of Association interface and can be easily added
- Android
  * ConvertNV21 - Convert camera preview images into BoofCV image types
  * VisualizeImageData - Render different types of image information into a visible format
- Fixed bug in RemoveRadialPto*_* where it couldn't detect convergence
- 2D stabilization checks image fraction contained by points before spawning more points
- LaplacianEdge added suport for U8 in and F32 out
- Added kernel based (using LaplacianEdge) blob detector
- GridRansacLineDetector has support for S16 an F32
- Redesigned image stabilization and mosaic code
  * Much easier to work with now and can be plugged in a high level
  * Added a factory for creating related algorithms
- Stereo Disparity: support for ImageSInt16

---------------------------------------------
Date    : 2012/12/05
Version : Alpha 0.12

- Fixed inverse wavelet transform so that it bounds the pixel values
  * Wavelet denoising sometimes overflowed
- Adding new feature tracker which combines KLT and DDA style tracking
- Updated Pyramid KLT tracker
  * Removed PkltTrackManager and pushed its functionality into the ImagePointTracker implementation
  * Was only separate for historical reasons
  * renamed PstWrapperPyramidKlt to PointTrackerKltPyramid
  * Deleted GenericPkltFeatureSelector and put into KLT point tracker
  * Moved what was left into KLT directory
- ImagePointTracker
  * Changed contract, more fully specified contract, improved tests
  * Updated behavior of implementing classes
- Deleted KeyFramePointTracker
  * Added pointless complexity.  Use ImagePointTracker instead
  * Changed 2D and 3D SFM algorithms which were using it
- Fixed bugs in various feature descriptors setTo() and copy() functions:
  * SurfFeature
  * TupleDesc_B
  * NccFeature
- Feature Descriptors
  * No longer have hidden orienation estimation algorithms inside
- Feature Orienation
  * Interfaces moved to abst package
  * Created wrappers to convert different types into image input
  * Added a new factory
- Created DetectDescribePoint interface
  * Combines detection and describing into a single interface
  * Useful for algorithms which have coupled data structures are are more efficient this way.
- FactoryPointSequentialTracker has been tweaked a bit
- GeneralAssociation provides two functions for specifying the source and destination lists
  * Allows better optimization since preprocessing might only need to be done once
- ConvertBufferedImage
  * Added support for sub-image BufferedImages
- All numerics code has been put into its own project
  * http://ddogleg.org
- Reworking several basic image operations
  * Created ImageMiscOps
  * Created ImageStatistics
  * Deleted ImageTestingOps
  * Changed PixelMath
  * Changed GeneralizedImageOps
- Added setTo() in ImageBase
- FastHessianFeatureDetector now recycles ScalePoints that it detects
- Removed canoncialRadius() from feature detector and descriptor
  * It was poorly implemented
  * Was not consistent with scale-space theory
- Added 2D convolution in KernelMath
- Maven build has been added.
  * BoofCV is on the central repository
- Added SIFT feature descriptor and detector
- Removed seperable kernel
  * Wasn't being used and there is no need for it with more modern techniques
  * Plus it was causing a unit test to fail
- Removed Gaussian12 and Steerable feature descriptors
  * They sucked and were not properly implemented limited their historical value

---------------------------------------------
Date    : 2012/11/6
Version : Alpha 0.11

- Association Score
  * Normalized Cross Correlation (NCC) has been fixed (yet again) in ScoreAssociateNccFeature where the abs() was incorretly being taken.
  * Fixed bug in NccFeature.setTo()
- FactoryAssociation
  * Added NCC to defaultScore()
- Template Matching
  * Added NCC template matching algorithm
  * TemplateScoreType: ERROR_SQUARED renamed to SUM_DIFF_SQ
- ModelSet
  * Original index of inlier set can be requested now
  * Removed the ability to generate multiple hypotheses.  Was not needed after all.
  * RANSAC score has been deleted and RANSAC simplified
- RectifyImageOps
  * Cleaned up function names and improved documentation
- LensDistortionOps
  * Added transformRadialToPixel_F64()
- Reorganized functions in geometric vision package
  * Created MultiViewOps and PerspetiveOps
  * Refactored/deleted other related Util classes
  * Enums are now used to select which algorithm is returned in the Factory in many cases
  * New interfaces for each problem and improved JavaDoc
- Moved AssociatedPair and PointPositionPair to boofcv.struct.geo package
- Trifocal Tensor
  * Added related functions to MultiViewOps
  * Added linear estimator for 7+ points
- PnP Problem
  * Added two P3P solutions
  * Analytic Jacobian for non-linear refinement
  * Refactored class names for better consistency
- Fixed bugs in StereoSparse3D
- Fixed bug in DistortImageOps.boundBox_F32()
- Added ImageGridPanel to display a set of images as a grid
- ModelMatcher added getMinimumSize()
- Renamed PointPosePair to Point2D3D since the old name was misleading
- Visual Odometry
  * Added stereo camera based algorithm that uses PnP for pose estimation
  * Removed broken mono and stereo algorithms
- DetectAssociateTracker
  * Changed from an abstract class into a regular class
  * Deleted SURF,BRIEF,NCC specific implementations since they are no longer needed
- AssociatedPair
  * renamed key and curr points to p1 and p2
  * new names are more generic and consistent
- DetectAssociateTracker
  * Changed internal design a bit and fixed bugs
  * Performs well in structure from motion applications (2D and 3D)
- ImagePointTracker accessors changed so that a storage list is requested
  * Makes usage easier since now its impossible to drop a track while reading
    from the main list.
  * Updated implementations so that the internal list is not returned
  * Removed addTrack() since only KLT supported that functionality, hence not generic.
- ConvertBufferedImage
  * Fixed bug where INDEXED images where not being converted correctly

---------------------------------------------
Date    : 2012/09/18
Version : Alpha 0.10

- Association Score
  * Pushed implementations of ScoreAssociation into abst package
  * Put most association distance algorithms into DescriptorDistance
  * Added hamming lookup table
  * Brief now uses a look up table.  About a 7x speed improvement.
  * FactoryAssociate now can create instances of ScoreAssociate.
  * Fixed incorrect NCC equation.  Thanks Christian Kramer.
- DescribeRegionPoint has been redesigned
  * Now more generic and can work with any feature descriptor
  * Separate function for checking to see if feature is inside bounds
- TupleDesc
  * changed to an interface
  * functions added to provide some generic support
- Brief descriptor renamed to TupleDesc_B
  * Acts as a generic binary feature descriptor
- Descriptors
  * BRIEF and BRIEF-SO now can process features along the image border.  Bit set to false in that case.
- Visualization Apps
  * VisualizeAssociationScoreApp has score type in a separate panel and can support binary descriptors
- InterestPointDetector
  * WrapFHtoInterestPoint now returns the correct detection radius
  * Fixed non-compliant implementations with incorrectly handled unsupported features.  Thanks jasonnn for submitting this bug
- FAST Feature Detector
  * Original implementation was buggy and did not produce same results as original author's code
  * Rewrote from scratch and replicates original author results
- GeneralFeatureDetector moved from extract to interest package
- Fundamental/Essential Matrix
  * 7-point algorithm now returns all solutions and the algorithm was tweaked
  * Nister 5-pt Essential Matrix
  * Abstractions which can handle multiple solutions
  * Stability evaluator for epipolar matrices
  * Improved unit tests
- Polynomials
  * Various ways to find and polish polynomial roots (EVD and Sturm)
  * New data type and basic operations
- Added ExampleStereoTwoViewsOneCamera
  * Demonstrates how to perform stereo image processing using a single camera and two views
- LensDistortionOps
  * Added normalized to distorted pixel transform
  * Tweaked some of the function names
- SparseIntegralSample_I32.isInBounds() did not return that correct value along the right and bottom image border
- Functions inside of GThresholdImageOps did not return the number of blobs found like it should
  * Thanks jasonnn
- NonMaxBlockStrict
  * Fixed bug where it assumed intensity values are all positive
- TemplateMatching
  * Added code for template matching
  * Added example code to demonstrate its use
- Added support for alpha channel in ConvertBufferedImage
- FactoryPointSequentialTracker doesn't create trackers with FAST detector instead uses ShiTomasi to improve stability

---------------------------------------------
Date    : 2012/7/22
Version : Alpha 0.9

- Renamed factories
  * FactoryBlobDetector -> FactoryDetectPoint
  * FactoryCornerDetector -> FactoryDetectPoint
- Renamed KLT corner to Shi Tomasi corner, which is more standard
- Fixed bug various point detectors where if the input image was resized the edge intensity might not be zero when it should be
- Changed some corner detection algorithms to take the intensity image in as an input.
- Added new Pixel to Normalized transform
- Created interface for Stereo visual odometry
- Fixed bug in unsafe_set inside of ImageInt8
- Added unsafe_set() and unsafe_get() to ImageFloat32, ImageFloat64, ImageSInt64
- Fixed bug in ImageSInt64.set() where the value was cast into a short
- Changed transform* functions inside of DistortImageOps so that you can specify how outside image pixels are handled.
- Fixed bug in ImageHistogramPanel - reported by Ray
  * Added support for integer images
- Integration
  * Created ant build scripts
  * Updated Xuggler integration code
  * Added Android
- Generalized SimpleImageSequence so that it does not reference BufferedImage and will play nicer with Android
- Fixed bug in ImplImageDistort* where for 16bit and 32 bit images values were being type casted into bytes
- Changed UnconstrainedMinimization so that the minimum function value is specified in setFunction()
- Added ExampleContours
  * Thanks cspnanda for pointing out the lack of documentation
- New non-maximum suppression algorithm
  * About the same for 3x3 regions, much faster for larger regions
  * Tweaked related API and improved unit tests
- Fixed bug in WrapDescrivePixelRegion where the descriptor is not properly configured for integer images
- Added SIFT feature descriptor and detector

---------------------------------------------
Date    : 2012/05/13
Version : Alpha 0.8

*IMPORTANT* Discard old calibration files and calibrate again with latest code!

- Added processing monitor to CalibrateStereoPlanarGuiApp
- Fixed bug in Zhang99 calibration where Rodrigues coordinates were being parameterized incorrectly
  * Calibration results would be less accurate, but have a lower residual due to the increased degree of freedom
- Added analytic Jacobian to Zhang99
  * Decided not to use it since it produces same estimation parameters as numerical.
- Added functions for creating detectors in FactoryPlanarCalibrationTarget
  * changed code to reference those functions
- Stereo Disparity Image
  * Dense and Sparse algorithms
  * Rectangular region winner take all (WTA)
    - Validation: right to left, max error, texture
    - Precision: Pixel and Subpixel
  * Algorithms:
    - Basic rectangular region
    - Five region adaptive: Hirschmuller, et. al. "Real-Time Correlation-Based Stereo Vision with Reduced Border Errors," 2002
- IntrinsicParameters
  * Added flipY to parameter list since it is vital information for many
    calculations.
- RectifyImageOps
  * Fixed bug in functions that adjusted the rectification for viewing.
    If left handed the coordinate systems got messed up
- Changed allInside() so that the annoying single pixel black region is gone
  * RectifyImageOps and LensDistortOps
- FactoryCornerDetector
  * Added flag for weighted KLT and Harris
- Added weighted corners to list of features in some evaluation apps
- Examples:
  * ExampleCalibrateMonocularPoints
  * ExampleDetectCalibrationPoints
  * ExampleStereoDisparity
- ImageTestingOps
  * Flip image vertical
- Fast point cloud viewer

---------------------------------------------
Date    : 2012/04/22
Version : Alpha 0.7

- Redesigned how evaluation apps/applets handle data input and configuration
- Removed the epipolar directory
  * More than just stereo algorithms in there
- Camera calibration outputs XML file containing intrinsic parameters
  * Java XML serialization
- For square calibration grids, added sub-pixel refinement using canny edge
- Fixed a bug in camera calibration where it transposed the grid instead of rotating it
  if the number of rows/columns needed to be swapped.
- 3D Vision Algorithms
  * Estimate translation given rotation and two observations
  * Refine pose estimate given set of 3D points and observations
  * Interface for n-view triangulation
  * Bundle adjustment for calibrated cameras
    - Analytic Jacobian
    - A bit slow right now
- Changed behavior of GeneralFeatureDetector
  * Supports sub-region extraction.  Forces features to be more spread out
  * Max N now is the total number of features, including excludes
- Improved speed of Levenberg algorithm by taking advantage of symmetry
- UtilEpipolar
  * Added canonicalCamera() and decomposeCameraMatrix()
- Created the following Util and Ops classes
  * UtilIntrinsic
  * LensDistortionOps
  * RectifyImageOps
- Stereo Rectification
  * Calibrated with known baseline
  * Uncalibrated, from using a fundamental matrix.
  * Adjust rectification to maximize usefull viewing area
- New Examples
  * Estimate fundamental matrix
  * Rectify calibrated
  * Rectify fundamental matrix
  * Remove lens distortion
- The feature score was not being set in WrapAssociateGreedy
  * Thanks Nir Amar
  * Also changed AssociateSurfBasic for a similar reason
- Fixed problem in FundamentalResidualSampson where the denominator was being squared
- Fixed problem in Se3 Essential generator
- Changed positive depth constraint class

---------------------------------------------
Date    : 2012/03/01
Version : Alpha 0.6

- Added convolution related code for ImageSInt32
- Added weighted KLT and Harris corner detectors
- Refactored factory names and other classes to make them easier to find
  and more consistent
- Planar calibration grid detectors
  * Chess board pattern
  * Square grid pattern
- Generic code for detecting squares in binary images
  * Inside of calibration module
- Application for calibration from planar calibration targets
  * GUI and commandline
- ImageDistort
  * Fixed bug where border.setImage() was not being called
- ImageBorder
  * Added generalized get(x,y)
- Refactored FactoryImageBorder into two factories
- Fixed bug in several derivative operators where the passed in border was being
  ignored and an extended border being used instead
- Change ImplImageDistort* to use interpolate.get_unsafe() to speed it up by a large margin
- Moved ImageDistort from boofcv.alg.distort to boofcv.struct.distort
- Added PointTransform_F32
- Added both forward and reverse radial distortion PixelTransform_F32 implementations
- ModelMatcher classes can now create multiple model hypotheses from a single set of points.
- Changed ImagePointTracker to use PointTrack instead of AssociatedPair
  * Created KeyFramePointTracker to track features and create AssociatedPairs
- Added FactoryEpipolar
- Added FactoryTriangulate
- Added non-linear refinement for:
  * Fundamental/Essential matrix
  * Homography matrix
  * Triangulation
- Added 2-view and N-View triangulation algorithms
  * DLT
  * Closest point from two lines
- Added EPnP from Lepetit 2009 paper
  * Validation against author's code is pending
- Added color processing to several Apps
  * EvaluateInterpolateEnlargeApp
  * ShowImageBlurApp
- Added SimpleNumberSequenceReader for reading small sequences of numbers
- Added lens distortion app
- Found subtle bug in Harris corner detector.
  * Surprisingly doesn't seem to change output that much.
- Interleaved image
  * get_unsafe and set_unsafe changed to unsafe_get and unsafe_set respectively.  For consistency.

---------------------------------------------
Date    : 2012/02/01
Version : Alpha 0.5

- Improved SURF performance
  * Fixed various bugs and changed algorithm to improve performance
    - Both speed and stibility have been improved
  * Now is the best performing SURF implementation in the benchmark
- ImplOrientationSlidingWindowIntegral has been replaced with a faster and more accurate algorithm
- Improved integral image support
- Improved sparse gradient support
- Refactored sparse image operator code
  * Added SparseImageSample interface
- Added/Improved unconstrained non-linear optimization code
  * Quasi-Newton line search
  * Levenberg-Marquardt
- Geometric vision and calibration code which uses non-linear optimization now works correectly
- Started converting internal micro benchmarks to use Caliper

---------------------------------------------
Date    : 2012/01/06
Version : Alpha 0.4

- Changed behavior of ConvertBufferedImage so that it won't automatically swap
  bands in MultiSpecitral image
  * orderBandsIntoRGB() has been provided to do that manually if needed
- All automatic convert to/from BGR and been removed from ConvertRaster
- Fixed SURF related issue
  * Image bounds check was being incorrectly performed for integral image
    orientation estimation algorithms (Thanks Oleg Chernoguz for pointing this out)
  * FactoryOrientationAlgs.sliding_ii() was creating an average orienation alg for I32 images
  * Some coordinates were integer instead of double
- Added comments to several factories and other classes
- Added ant script for examples and readme.txt explaining how to use it

---------------------------------------------
Date    : 2012/01/02
Version : Alpha 0.3

- Camera Calibration
  * Planar grid (Zhang 98)
  * Camera calibration matrix from homographies
  * Linear radial distortion
  * Decomposition of homography for calibration
  * Nonlinear optimization of all parameters
- Calibration Grid Detection
  * Detects corners up to "pixel accuracy", in reality its probably worse than that
  * Sub-pixel accuracy code exists but needs more work
- Added min and max values to ImageTestingOps.addGaussian()
- Tweaked factories related to wavelet denoising so that they take in
  an image type.
- Removed cyclical dependency between modules by creating a visualize modules
- Added to BinaryImageOps
  * label to clusters
  * clusters to binary
- Renamed ImageBase to ImageSingleBand
- Created a new ImageBase
- Flushed out MultSpectral image type more and extended ImageBase
  * Created functions to convert to and from BufferedImage
- Changed behavior of several functions in GeneralizedImageOps to include
  MultiSpectral images
  * refactor createImage -> createSingleBand
- Updated ant scripts
  * Common template is now used for the different modules
  * Fixed unit test and make it work across the whole project
- Added crop to ImageDistort
  * If cropping is used the only part of the destimation image is processed
- Created calibration package to hold calibration related code
- Moved jars not part of the primary build into boofcv/lib/testing
- Started converting runtime benchmark code over to Caliper
  * http://code.google.com/p/caliper/

---------------------------------------------
Date    : 2011/12/01
Version : Alpha 0.2

- Added integer polynomial interpolation
  * Cleaned up polynomial interpolation code
- Fixed bug in PixelMath.bound() dealing with unsigned images
- Converting to a BufferedImage now marks it as modified
- Added min and max pixel values to ImageTypeInfo
- Added ComplexMath
- Added PolynomialSolver
- Added process(image) to PointSequentialTracker and renamed it to ImagePointTracker
- Added the following 3D vision code:
  * Linear 8-point essential/fundamental matrix
  * Linear 7-point essential/fundamental matrix
  * Linear 4-point homography
  * Extract camera motion from essential
  * Extract camera and plane normal from homography
  * Triangulate: Linear pixel depth
  * Projective N Point (PNP): Linear N >= 6
- Added non-linear optimizer based upon Levenberg-Marquardt
- Added pixel region based descriptors
  * Raw pixel values
  * Normalized Cross Correlation (NCC)
- Added pixel region based trackers
- Added Sum of Absolute Difference (SAD) feature association score for several different descriptor types.

---------------------------------------------
Date    : 2011/11/01
Version : Alpha 0.1

- Initial public release
