
// Create a list of all core sub-projects automatically that need to be tested
def coreModules = rootProject.subprojects.findAll {it -> it.path.startsWith(":main:boofcv-")}

dependencies {
	api project(':main:boofcv-core')
	api project(':main:autocode')

	coreModules.forEach {valid->testImplementation(valid.sourceSets.test.output)}
	testImplementation project(':integration:boofcv-swing')

	coreModules.forEach {valid->runtimeOnly(valid.sourceSets.benchmark.output)}
	runtimeOnly project(':main:boofcv-feature').sourceSets.experimental.output
	runtimeOnly project(':integration:boofcv-ffmpeg') // one test decodes a mp4

	implementation(group: 'com.peterabeles', name: 'regression', version: auto64to32_version)
	implementation group: 'com.peterabeles', name: 'language', version: auto64to32_version
	api("org.openjdk.jmh:jmh-core:$jmh_version")
}

// Run the regression using a gradle command
// Currently this is the only way to get paths set up for benchmarks. See comment below.
//
// Example: ./gradlew runtimeRegression run --console=plain -Dexec.args="--SummaryOnly"
task runtimeRegression(type: JavaExec) {
	dependsOn build
	group = "Execution"
	description = "Run the mainClass from the output jar in classpath with ExecTask"
	classpath = sourceSets.main.runtimeClasspath
	main = "boofcv.regression.BoofCVRuntimeRegressionApp"
	args System.getProperty("exec.args", "").split()
}
