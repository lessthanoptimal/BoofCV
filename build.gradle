import org.gradle.api.tasks.testing.logging.TestExceptionFormat

//import net.ltgt.gradle.errorprone.CheckSeverity

plugins {
    id "com.peterabeles.gversion" version "1.10" apply false
    id "net.ltgt.errorprone" version "2.0.1" apply false
    id "com.diffplug.spotless" version "5.6.1" apply false
}

ext.libpath = file('./').absolutePath

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'com.peterabeles.gversion'

    group = 'org.boofcv'
    version = '0.38-SNAPSHOT'

    ext.COMMONS_IO_VERSION = '2.6'

    createVersionFile.enabled = false // run only once. enabled in types
}

project.ext.set("deepboof_version", '0.5.1-SNAPSHOT')
project.ext.set("lombok_version", '1.18.18')
project.ext.set("errorprone_version", '2.7.1')

// Which native platforms are supported can be specified in the command line.  Otherwise
// the default is to support all of them
if( project.hasProperty("native_arch")) {
    project.ext.native_arch = [project.native_arch]
} else {
    project.ext.native_arch = ["linux-x86_64", "macosx-x86_64", "windows-x86_64"]
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'com.diffplug.spotless'

    java {
        withJavadocJar()
        withSourcesJar()
        toolchain { languageVersion = JavaLanguageVersion.of(15) }
    }

    // Prevents tons of errors if someone is using ASCII
    tasks.withType(JavaCompile).configureEach { options.encoding = "UTF-8" }
    // Creates Java 8 byte code
    tasks.withType(JavaCompile).configureEach { options.release = 8 }

    // Enable incremental compile. Should make single file changes faster
    tasks.withType(JavaCompile) { options.incremental = true }

    // To make ErrorProne and Kotlin plugins happy
    configurations.configureEach {
        resolutionStrategy {
            force 'org.jetbrains:annotations:20.0.0'
            force 'com.google.guava:guava:30.1-jre'
            force "com.google.errorprone:error_prone_annotations:$project.errorprone_version"
            force 'com.google.code.findbugs:jsr305:3.0.2'
            force 'org.checkerframework:checker-qual:2.10.0'
        }
    }

    // Fail on jar conflict
    configurations.configureEach { resolutionStrategy { failOnVersionConflict() } }

    repositories {
        mavenCentral()
        mavenLocal()

        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url = 'https://jitpack.io' } // Allows annotations past Java 8 to be used
    }

    test {
        useJUnitPlatform()
        reports.html.enabled = false
        // Make the error logging verbose to make debugging on CI easier
        testLogging.showStandardStreams = true
        testLogging.exceptionFormat TestExceptionFormat.FULL
        testLogging.showCauses true
        testLogging.showExceptions true
        testLogging.showStackTraces true
    }

    sourceSets {
        // no auto generated code is allowed in this sourceSet. This is to get around cyclical dependencies
        // See docs/AutoGeneratedCode.md
        noauto { java { srcDir 'src/noauto/java' } }

        // Ensures the code in noauto is also published
        main { output.dir(noauto.output) }

        benchmark {
            java { srcDir 'src/benchmark/java' }
            resources { srcDir 'src/benchmark/resources' }
        }
        generate {
            java { srcDir 'src/generate/java' }
            resources { srcDir 'src/generate/resources' }
        }

        experimental {
            java { srcDir 'src/experimental/java' }
            resources { srcDir 'src/experimental/resources' }
        }
    }

    dependencies {
        api(group: 'org.georegression', name: 'georegression', version: '0.24-SNAPSHOT')
        api(group: 'org.ddogleg', name: 'ddogleg', version: '0.20')

        api group: 'net.sf.trove4j', name: 'trove4j', version: '3.0.3'

        compileOnly "org.projectlombok:lombok:${project.lombok_version}"
        compileOnly 'org.jetbrains:annotations:20.0.0' // @Nullable
        compileOnly 'javax.annotation:jsr250-api:1.0'  // @Generated

        noautoCompileOnly "org.projectlombok:lombok:${project.lombok_version}"
        noautoCompileOnly 'org.jetbrains:annotations:20.0.0' // @Nullable
        noautoCompileOnly 'javax.annotation:jsr250-api:1.0'  // @Generated

        testImplementation('org.junit.jupiter:junit-jupiter-api:5.4.0')
        testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.4.0')

        experimentalImplementation project.sourceSets.main.compileClasspath
        experimentalImplementation project.sourceSets.main.runtimeClasspath

        testImplementation project.sourceSets.benchmark.output
        testImplementation project.sourceSets.benchmark.compileClasspath
        testImplementation project.sourceSets.benchmark.runtimeClasspath

        benchmarkImplementation project.sourceSets.experimental.output
        benchmarkImplementation project.sourceSets.generate.output
        benchmarkImplementation project.sourceSets.main.runtimeClasspath
        benchmarkImplementation project.sourceSets.main.compileClasspath

        ['1.27'].each { String a ->
            benchmarkImplementation('org.openjdk.jmh:jmh-core:' + a)
            benchmarkAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:' + a
        }

        // needed to use Java 11+ syntax with Java 1.8 byte code
        annotationProcessor('com.github.bsideup.jabel:jabel-javac-plugin:0.3.0')
        noautoAnnotationProcessor('com.github.bsideup.jabel:jabel-javac-plugin:0.3.0')
        testAnnotationProcessor('com.github.bsideup.jabel:jabel-javac-plugin:0.3.0')
        benchmarkAnnotationProcessor('com.github.bsideup.jabel:jabel-javac-plugin:0.3.0')
        generateAnnotationProcessor('com.github.bsideup.jabel:jabel-javac-plugin:0.3.0')

        annotationProcessor "org.projectlombok:lombok:${project.lombok_version}"  // @Getter @Setter
        noautoAnnotationProcessor "org.projectlombok:lombok:${project.lombok_version}"  // @Getter @Setter

        errorprone("com.google.errorprone:error_prone_core:$project.errorprone_version")
//        // even if it's not used you still need to include the dependency
//        annotationProcessor "com.uber.nullaway:nullaway:0.8.0"
//        testAnnotationProcessor "com.uber.nullaway:nullaway:0.8.0"
//        benchmarkAnnotationProcessor "com.uber.nullaway:nullaway:0.8.0"
    }

    tasks.withType(JavaCompile).configureEach {
        options.errorprone.enabled = true
        options.errorprone.disableWarningsInGeneratedCode = true
        options.errorprone.disable("TypeParameterUnusedInFormals", "StringSplitter", "InconsistentCapitalization",
                "HidingField", // this is sometimes done when the specific type is known by child. Clean up later.
                "ClassNewInstance", // yes it's deprecated, but new version is more verbose with ignored errors
                "FloatingPointLiteralPrecision", // too many false positives in test code
                "EmptyCatch", // doesn't acknowledge "ignore". can't get the fix working. Should be an error
                "ReferenceEquality", // This is done intentionally a TON. Good test but not here
                "MutablePublicArray", // Done intentionally in every case
                "CatchAndPrintStackTrace", // Should clean up, but done too often right now
                "UnnecessaryParentheses", // Log SPAM due to JDK-14 Error Prone BUG
                "SameNameButDifferent", // Lombok confuses it
                "MissingSummary", "UnescapedEntity", "EmptyBlockTag")
        options.errorprone.error("MissingOverride", "MissingCasesInEnumSwitch", "BadInstanceof",
                "PublicConstructorForAbstractClass", "NarrowingCompoundAssignment", "JdkObsolete")

        if (name.startsWith("compileTest")) {
            options.errorprone.disable("IntLongMath", "ClassCanBeStatic", "UnnecessaryParentheses")
        }

        if (name.startsWith("compileBenchmark")) {
            options.errorprone.disable("StaticAssignmentInConstructor", "UnusedVariable")
        }

//        options.errorprone {
//            check("NullAway", CheckSeverity.ERROR)
//            option("NullAway:TreatGeneratedAsUnannotated", true)
//            option("NullAway:AnnotatedPackages", "boofcv")
//        }
    }

    javadoc {
        configure(options) {
            links = ['http://docs.oracle.com/javase/8/docs/api/',
                     'http://ejml.org/javadoc/',
                     'http://ddogleg.org/javadoc/',
                     'http://georegression.org/javadoc/']
            failOnError = false
            enabled = !project.version.contains("SNAPSHOT") // disable to stop it from spamming stdout
        }

        // https://github.com/gradle/gradle/issues/11182 Error introduced in JDK 11
        if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {
            options.addStringOption("-release", "8")
        }

        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    // Force the release build to fail if it depends on a SNAPSHOT
    project.jar.dependsOn project.checkDependsOnSNAPSHOT

    // Force publish to fail if trying to upload a stable release and git is dirty
    project.publish.dependsOn failDirtyNotSnapshot

    // Skip these codeless directories when publishing jars locally or to a remote destination
    if (['main', 'integration', 'checks'].contains(name)) {
        project.jar.enabled = false
        project.uploadArchives.enabled = false
        project.tasks.publish.enabled = false
    }
    if (['autocode'].contains(name)) {
        project.uploadArchives.enabled = false
        project.tasks.publish.enabled = false
    }

    spotless {
        ratchetFrom 'origin/SNAPSHOT'

        format 'misc', {
            // define the files to apply `misc` to
            target '*.gradle', '*.md', '.gitignore'

            // define the steps to apply to those files
            trimTrailingWhitespace()
            indentWithTabs()
            endWithNewline()
        }
        java {
            // There is currently no good way to exclude files that contain "@Generated" or are not versions.
            // This should catch most of them with a few false positives.
            target('**/java/boofcv/**/*.java')
            targetExclude('**/*_MT*.java','**/*_F32.java','**/generated/*')

            toggleOffOn('formatter:off', 'formatter:on')
            removeUnusedImports()
            endWithNewline()

            licenseHeaderFile "${project.rootDir}/misc/copyright.txt"
        }
    }

    if (!project.tasks.publish.enabled)
        return

    // if Maven central isn't setup in ~/.gradle/gradle.properties fill in these variables to make it happy
    if( !project.hasProperty('ossrhUsername') ) {
        ext.ossrhUsername = "dummy"
        ext.ossrhPassword = "dummy"
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                pom {
                    name = 'BoofCV'
                    description = 'BoofCV is an open source Java library for real-time computer vision and robotics applications.'
                    url = 'https://boofcv.org'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'pabeles'
                            name = 'Peter Abeles'
                            email = 'peter.abeles@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/lessthanoptimal/BoofCV.git'
                        developerConnection = 'scm:git:git://github.com/lessthanoptimal/BoofCV.git'
                        url = 'https://github.com/lessthanoptimal/BoofCV'
                    }
                }
            }
        }
        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }

    if (ext.ossrhPassword != "dummy") {
        signing { sign publishing.publications.mavenJava }
    }
}

// Can't reference sourceSets as a dependency until that sub-project has been created which is why this code
// to handle dependencies for auto generated code is defined below. `generate` depends on `noauto` source set
// as a way to avoid a cyclical dependency
//
// See docs/AutoGeneratedCode.md
subprojects {
//    if( !project.path.startsWith(':main:') )
//        return

    project.dependencies {
        generateImplementation project(':main:autocode')
        generateImplementation project(':main:boofcv-types').sourceSets.noauto.output
    }

    if( project.path.contains('boofcv-types') )
        return

    project.dependencies {
        // needed for testing Config*
        implementation project(':main:boofcv-types').sourceSets.noauto.output
        testImplementation project(':main:boofcv-types').sourceSets.test.output
    }
}

// list of projects for creating javadoc and jars
def mainProjects = [
        ':main:boofcv-types',
        ':main:boofcv-ip',
        ':main:boofcv-ip-multiview',
        ':main:boofcv-learning',
        ':main:boofcv-io',
        ':main:boofcv-feature',
        ':main:boofcv-geo',
        ':main:boofcv-sfm',
        ':main:boofcv-recognition',
        ':main:boofcv-reconstruction',
        ':main:boofcv-learning',
        ':main:boofcv-simulation',
        ':integration:boofcv-swing'
]

def integrationProjects = [
        ':integration:boofcv-jcodec',
        ':integration:boofcv-WebcamCapture',
        ':integration:boofcv-javacv',
        ':integration:boofcv-ffmpeg',
]

checkProjectExistsAddToList(':integration:boofcv-javafx', integrationProjects)
checkProjectExistsAddToList(':integration:boofcv-android', integrationProjects)
checkProjectExistsAddToList(':integration:boofcv-openkinect', integrationProjects)

def javadocProjects = mainProjects + integrationProjects

// Creates a directory with all the compiled BoofCV jars and the dependencies for main
task createLibraryDirectory( dependsOn: javadocProjects.collect {[ it+':jar',it+':sourcesJar']}.flatten() ) {
    doLast {
        // Compiled jars (bin and src) for all BoofCV modules
        ext.boofJars = files(javadocProjects.collect { project(it).tasks.jar.archivePath })
        ext.boofJars += files(javadocProjects.collect { project(it).tasks.sourcesJar.archivePath })

        // This will be a list of just external dependencies
        ext.listExternal = files(javadocProjects.collect { project(it).configurations.runtimeClasspath })
        ext.listExternal = ext.listExternal - ext.boofJars
        ext.listExternal = ext.listExternal.findAll({ !it.getName().contains("android.jar") })

        ext.fileName = "boofcv-v"+version+"-libs"
        file(ext.fileName).deleteDir()
        file(ext.fileName).mkdir()

        copy {
            from ext.listExternal
            into ext.fileName
        }

        copy {
            from ext.boofJars
            into ext.fileName
        }

        println("\n\nSaved to directory "+ext.fileName)
    }
}

// Creates a single jar which contains all the subprojects in main and integration
task oneJarBin(type: Jar, dependsOn: javadocProjects.collect { it + ":compileJava" }) {
    archiveFile.set(file("boofcv-v${project.version}.jar"))

    from files(javadocProjects.collect { project(it).sourceSets.main.output }) {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
}

// Generates a global javadoc from all the modules
task alljavadoc(type: Javadoc,  group: "Documentation") {
    // only include source code in src directory to avoid including 3rd party code which some projects do as a hack
    source = javadocProjects.collect { project(it).sourceSets.main.allJava } +
            javadocProjects.collect { project(it).sourceSets.noauto.allJava }
    classpath = files(javadocProjects.collect { project(it).sourceSets.main.compileClasspath }) +
            files(javadocProjects.collect { project(it).sourceSets.noauto.compileClasspath })

    destinationDir = file("docs/api")

    // Hack for Java 8u121 and beyond. Comment out if running an earlier version of Java
    options.addBooleanOption("-allow-script-in-comments", true)

    // Flag is no longer around in later versions of Java but required before
    if (JavaVersion.current().ordinal() < JavaVersion.VERSION_13.ordinal()) {
        options.addBooleanOption("-no-module-directories", true)
    }

    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }

    // Add a list of uses of a class to javadoc
    options.use = true

    configure(options) {
        failOnError = false
        title = "BoofCV ($project.version)"
        links = [ 'http://docs.oracle.com/javase/8/docs/api/',
                  'http://ejml.org/javadoc/',
                  'http://georegression.org/javadoc/',
                  'http://ddogleg.org/javadoc/']
    }

    // Work around a Gradle design flaw. It won't copy over files in doc-files
    doLast {
        copy {
            from javadocProjects.collect { project(it).fileTree('src/main/java').include('**/doc-files/*') }
            into destinationDir
        }
    }
}

task alljavadocWeb() {
    doFirst {
        alljavadoc.options.bottom = file('misc/bottom.txt').text
        alljavadoc.destinationDir = file("docs/api-web")
    }
}
alljavadocWeb.finalizedBy(alljavadoc)

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn subprojects*.test
}

wrapper {
    distributionType = Wrapper.DistributionType.BIN
    gradleVersion = '6.8.3'
}
